/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VerejnaZakazka : IEquatable<VerejnaZakazka>
    { 
        /// <summary>
        /// true, pokud se zakázka vyskytuje pouze na profilu zadavatele
        /// </summary>
        /// <value>true, pokud se zakázka vyskytuje pouze na profilu zadavatele</value>
        [DataMember(Name="onlyOnProfile")]
        public bool? OnlyOnProfile { get; set; }

        /// <summary>
        /// unikátní identifikátor zakázky
        /// </summary>
        /// <value>unikátní identifikátor zakázky</value>
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// evidenční číslo, použité ve zdrojové databázi
        /// </summary>
        /// <value>evidenční číslo, použité ve zdrojové databázi</value>
        [DataMember(Name="evidencniCisloZakazky")]
        public string EvidencniCisloZakazky { get; set; }

        /// <summary>
        /// evidenční číslo na profilu zadavatelů
        /// </summary>
        /// <value>evidenční číslo na profilu zadavatelů</value>
        [DataMember(Name="zakazkaNaProfiluId")]
        public string ZakazkaNaProfiluId { get; set; }

        /// <summary>
        /// web, ze kterého byla zakázka importována
        /// </summary>
        /// <value>web, ze kterého byla zakázka importována</value>
        [DataMember(Name="dataset")]
        public string Dataset { get; set; }

        /// <summary>
        /// Gets or Sets Zadavatel
        /// </summary>
        [DataMember(Name="zadavatel")]
        public VerejnaZakazkaZadavatel Zadavatel { get; set; }

        /// <summary>
        /// seznam dodavatelů, kteří vysoutěžili zakázku; pokud je pole prázdné, zakázka nebyla vysoutěžena
        /// </summary>
        /// <value>seznam dodavatelů, kteří vysoutěžili zakázku; pokud je pole prázdné, zakázka nebyla vysoutěžena</value>
        [DataMember(Name="dodavatele")]
        public List<VerejnaZakazkaDodavatele> Dodavatele { get; set; }

        /// <summary>
        /// Gets or Sets NazevZakazky
        /// </summary>
        [DataMember(Name="nazevZakazky")]
        public string NazevZakazky { get; set; }

        /// <summary>
        /// Gets or Sets PopisZakazky
        /// </summary>
        [DataMember(Name="popisZakazky")]
        public string PopisZakazky { get; set; }

        /// <summary>
        /// Seznam CPV kódů, které určují zaměření zakázky (stavebnictví, IT, ...) viz &lt;http://www.isvz.cz/ISVZ/Ciselniky/ISVZ_klasifikace_ciselniky.aspx&gt; 
        /// </summary>
        /// <value>Seznam CPV kódů, které určují zaměření zakázky (stavebnictví, IT, ...) viz &lt;http://www.isvz.cz/ISVZ/Ciselniky/ISVZ_klasifikace_ciselniky.aspx&gt; </value>
        [DataMember(Name="cPV")]
        public List<string> CPV { get; set; }

        /// <summary>
        /// Datum uveřejnění zakázky
        /// </summary>
        /// <value>Datum uveřejnění zakázky</value>
        [DataMember(Name="datumUverejneni")]
        public string DatumUverejneni { get; set; }

        /// <summary>
        /// Datum poslední úpravy zakázky
        /// </summary>
        /// <value>Datum poslední úpravy zakázky</value>
        [DataMember(Name="posledniZmena")]
        public string PosledniZmena { get; set; }

        /// <summary>
        /// Gets or Sets KonecnaHodnotaBezDPH
        /// </summary>
        [DataMember(Name="konecnaHodnotaBezDPH")]
        public decimal? KonecnaHodnotaBezDPH { get; set; }

        /// <summary>
        /// ve které měně je uvedená konečná hodnota
        /// </summary>
        /// <value>ve které měně je uvedená konečná hodnota</value>
        [DataMember(Name="konecnaHodnotaMena&quot;")]
        public string KonecnaHodnotaMena { get; set; }

        /// <summary>
        /// Přílohy veřejné zakázky
        /// </summary>
        /// <value>Přílohy veřejné zakázky</value>
        [DataMember(Name="dokumenty")]
        public List<VerejnaZakazkaPriloha> Dokumenty { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerejnaZakazka {\n");
            sb.Append("  OnlyOnProfile: ").Append(OnlyOnProfile).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EvidencniCisloZakazky: ").Append(EvidencniCisloZakazky).Append("\n");
            sb.Append("  ZakazkaNaProfiluId: ").Append(ZakazkaNaProfiluId).Append("\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  Zadavatel: ").Append(Zadavatel).Append("\n");
            sb.Append("  Dodavatele: ").Append(Dodavatele).Append("\n");
            sb.Append("  NazevZakazky: ").Append(NazevZakazky).Append("\n");
            sb.Append("  PopisZakazky: ").Append(PopisZakazky).Append("\n");
            sb.Append("  CPV: ").Append(CPV).Append("\n");
            sb.Append("  DatumUverejneni: ").Append(DatumUverejneni).Append("\n");
            sb.Append("  PosledniZmena: ").Append(PosledniZmena).Append("\n");
            sb.Append("  KonecnaHodnotaBezDPH: ").Append(KonecnaHodnotaBezDPH).Append("\n");
            sb.Append("  KonecnaHodnotaMena: ").Append(KonecnaHodnotaMena).Append("\n");
            sb.Append("  Dokumenty: ").Append(Dokumenty).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VerejnaZakazka)obj);
        }

        /// <summary>
        /// Returns true if VerejnaZakazka instances are equal
        /// </summary>
        /// <param name="other">Instance of VerejnaZakazka to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerejnaZakazka other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OnlyOnProfile == other.OnlyOnProfile ||
                    OnlyOnProfile != null &&
                    OnlyOnProfile.Equals(other.OnlyOnProfile)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    EvidencniCisloZakazky == other.EvidencniCisloZakazky ||
                    EvidencniCisloZakazky != null &&
                    EvidencniCisloZakazky.Equals(other.EvidencniCisloZakazky)
                ) && 
                (
                    ZakazkaNaProfiluId == other.ZakazkaNaProfiluId ||
                    ZakazkaNaProfiluId != null &&
                    ZakazkaNaProfiluId.Equals(other.ZakazkaNaProfiluId)
                ) && 
                (
                    Dataset == other.Dataset ||
                    Dataset != null &&
                    Dataset.Equals(other.Dataset)
                ) && 
                (
                    Zadavatel == other.Zadavatel ||
                    Zadavatel != null &&
                    Zadavatel.Equals(other.Zadavatel)
                ) && 
                (
                    Dodavatele == other.Dodavatele ||
                    Dodavatele != null &&
                    Dodavatele.SequenceEqual(other.Dodavatele)
                ) && 
                (
                    NazevZakazky == other.NazevZakazky ||
                    NazevZakazky != null &&
                    NazevZakazky.Equals(other.NazevZakazky)
                ) && 
                (
                    PopisZakazky == other.PopisZakazky ||
                    PopisZakazky != null &&
                    PopisZakazky.Equals(other.PopisZakazky)
                ) && 
                (
                    CPV == other.CPV ||
                    CPV != null &&
                    CPV.SequenceEqual(other.CPV)
                ) && 
                (
                    DatumUverejneni == other.DatumUverejneni ||
                    DatumUverejneni != null &&
                    DatumUverejneni.Equals(other.DatumUverejneni)
                ) && 
                (
                    PosledniZmena == other.PosledniZmena ||
                    PosledniZmena != null &&
                    PosledniZmena.Equals(other.PosledniZmena)
                ) && 
                (
                    KonecnaHodnotaBezDPH == other.KonecnaHodnotaBezDPH ||
                    KonecnaHodnotaBezDPH != null &&
                    KonecnaHodnotaBezDPH.Equals(other.KonecnaHodnotaBezDPH)
                ) && 
                (
                    KonecnaHodnotaMena == other.KonecnaHodnotaMena ||
                    KonecnaHodnotaMena != null &&
                    KonecnaHodnotaMena.Equals(other.KonecnaHodnotaMena)
                ) && 
                (
                    Dokumenty == other.Dokumenty ||
                    Dokumenty != null &&
                    Dokumenty.SequenceEqual(other.Dokumenty)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OnlyOnProfile != null)
                    hashCode = hashCode * 59 + OnlyOnProfile.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (EvidencniCisloZakazky != null)
                    hashCode = hashCode * 59 + EvidencniCisloZakazky.GetHashCode();
                    if (ZakazkaNaProfiluId != null)
                    hashCode = hashCode * 59 + ZakazkaNaProfiluId.GetHashCode();
                    if (Dataset != null)
                    hashCode = hashCode * 59 + Dataset.GetHashCode();
                    if (Zadavatel != null)
                    hashCode = hashCode * 59 + Zadavatel.GetHashCode();
                    if (Dodavatele != null)
                    hashCode = hashCode * 59 + Dodavatele.GetHashCode();
                    if (NazevZakazky != null)
                    hashCode = hashCode * 59 + NazevZakazky.GetHashCode();
                    if (PopisZakazky != null)
                    hashCode = hashCode * 59 + PopisZakazky.GetHashCode();
                    if (CPV != null)
                    hashCode = hashCode * 59 + CPV.GetHashCode();
                    if (DatumUverejneni != null)
                    hashCode = hashCode * 59 + DatumUverejneni.GetHashCode();
                    if (PosledniZmena != null)
                    hashCode = hashCode * 59 + PosledniZmena.GetHashCode();
                    if (KonecnaHodnotaBezDPH != null)
                    hashCode = hashCode * 59 + KonecnaHodnotaBezDPH.GetHashCode();
                    if (KonecnaHodnotaMena != null)
                    hashCode = hashCode * 59 + KonecnaHodnotaMena.GetHashCode();
                    if (Dokumenty != null)
                    hashCode = hashCode * 59 + Dokumenty.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VerejnaZakazka left, VerejnaZakazka right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VerejnaZakazka left, VerejnaZakazka right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

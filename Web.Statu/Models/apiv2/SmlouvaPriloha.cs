/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SmlouvaPriloha : IEquatable<SmlouvaPriloha>
    { 
        /// <summary>
        /// metadata ze souboru
        /// </summary>
        /// <value>metadata ze souboru</value>
        [Required]
        [DataMember(Name="FileMetadata")]
        public string FileMetadata { get; set; }

        /// <summary>
        /// Gets or Sets NazevSouboru
        /// </summary>
        [Required]
        [DataMember(Name="nazevSouboru")]
        public string NazevSouboru { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [Required]
        [DataMember(Name="hash")]
        public SmlouvaPrilohaHash Hash { get; set; }

        /// <summary>
        /// odkaz na původní soubor
        /// </summary>
        /// <value>odkaz na původní soubor</value>
        [Required]
        [DataMember(Name="odkaz")]
        public string Odkaz { get; set; }

        /// <summary>
        /// Gets or Sets PlainTextContent
        /// </summary>
        [Required]
        [DataMember(Name="PlainTextContent")]
        public string PlainTextContent { get; set; }

        /// <summary>
        /// * Unknown &#x3D; 0, * Exact &#x3D; 1 - získáno z txt souboru, přesná podoba * Calculated &#x3D; 2, * Parsed &#x3D; 3,  - získáno strojově z dokumentu * Estimated &#x3D; 4,  - získáno pomocí OCR, nepřesné * AddedManual &#x3D; 5, - doplněno ručně 
        /// </summary>
        /// <value>* Unknown &#x3D; 0, * Exact &#x3D; 1 - získáno z txt souboru, přesná podoba * Calculated &#x3D; 2, * Parsed &#x3D; 3,  - získáno strojově z dokumentu * Estimated &#x3D; 4,  - získáno pomocí OCR, nepřesné * AddedManual &#x3D; 5, - doplněno ručně </value>
        [Required]
        [DataMember(Name="PlainTextContentQuality")]
        public int? PlainTextContentQuality { get; set; }

        /// <summary>
        /// čas poslední aktualizace souboru
        /// </summary>
        /// <value>čas poslední aktualizace souboru</value>
        [Required]
        [DataMember(Name="LastUpdate")]
        public string LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [Required]
        [DataMember(Name="ContentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [Required]
        [DataMember(Name="Length")]
        public int? Length { get; set; }

        /// <summary>
        /// Gets or Sets WordCount
        /// </summary>
        [Required]
        [DataMember(Name="WordCount")]
        public int? WordCount { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [Required]
        [DataMember(Name="Pages")]
        public int? Pages { get; set; }

        /// <summary>
        /// zda bylo z přílohy vyxetrahováno dostatečně textu, abychom mohli prohlásit, že jsme z toho vyextrahovali nějaká data
        /// </summary>
        /// <value>zda bylo z přílohy vyxetrahováno dostatečně textu, abychom mohli prohlásit, že jsme z toho vyextrahovali nějaká data</value>
        [Required]
        [DataMember(Name="EnoughExtractedText")]
        public bool? EnoughExtractedText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmlouvaPriloha {\n");
            sb.Append("  FileMetadata: ").Append(FileMetadata).Append("\n");
            sb.Append("  NazevSouboru: ").Append(NazevSouboru).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Odkaz: ").Append(Odkaz).Append("\n");
            sb.Append("  PlainTextContent: ").Append(PlainTextContent).Append("\n");
            sb.Append("  PlainTextContentQuality: ").Append(PlainTextContentQuality).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  WordCount: ").Append(WordCount).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  EnoughExtractedText: ").Append(EnoughExtractedText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmlouvaPriloha)obj);
        }

        /// <summary>
        /// Returns true if SmlouvaPriloha instances are equal
        /// </summary>
        /// <param name="other">Instance of SmlouvaPriloha to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmlouvaPriloha other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileMetadata == other.FileMetadata ||
                    FileMetadata != null &&
                    FileMetadata.Equals(other.FileMetadata)
                ) && 
                (
                    NazevSouboru == other.NazevSouboru ||
                    NazevSouboru != null &&
                    NazevSouboru.Equals(other.NazevSouboru)
                ) && 
                (
                    Hash == other.Hash ||
                    Hash != null &&
                    Hash.Equals(other.Hash)
                ) && 
                (
                    Odkaz == other.Odkaz ||
                    Odkaz != null &&
                    Odkaz.Equals(other.Odkaz)
                ) && 
                (
                    PlainTextContent == other.PlainTextContent ||
                    PlainTextContent != null &&
                    PlainTextContent.Equals(other.PlainTextContent)
                ) && 
                (
                    PlainTextContentQuality == other.PlainTextContentQuality ||
                    PlainTextContentQuality != null &&
                    PlainTextContentQuality.Equals(other.PlainTextContentQuality)
                ) && 
                (
                    LastUpdate == other.LastUpdate ||
                    LastUpdate != null &&
                    LastUpdate.Equals(other.LastUpdate)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                ) && 
                (
                    WordCount == other.WordCount ||
                    WordCount != null &&
                    WordCount.Equals(other.WordCount)
                ) && 
                (
                    Pages == other.Pages ||
                    Pages != null &&
                    Pages.Equals(other.Pages)
                ) && 
                (
                    EnoughExtractedText == other.EnoughExtractedText ||
                    EnoughExtractedText != null &&
                    EnoughExtractedText.Equals(other.EnoughExtractedText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileMetadata != null)
                    hashCode = hashCode * 59 + FileMetadata.GetHashCode();
                    if (NazevSouboru != null)
                    hashCode = hashCode * 59 + NazevSouboru.GetHashCode();
                    if (Hash != null)
                    hashCode = hashCode * 59 + Hash.GetHashCode();
                    if (Odkaz != null)
                    hashCode = hashCode * 59 + Odkaz.GetHashCode();
                    if (PlainTextContent != null)
                    hashCode = hashCode * 59 + PlainTextContent.GetHashCode();
                    if (PlainTextContentQuality != null)
                    hashCode = hashCode * 59 + PlainTextContentQuality.GetHashCode();
                    if (LastUpdate != null)
                    hashCode = hashCode * 59 + LastUpdate.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                    if (WordCount != null)
                    hashCode = hashCode * 59 + WordCount.GetHashCode();
                    if (Pages != null)
                    hashCode = hashCode * 59 + Pages.GetHashCode();
                    if (EnoughExtractedText != null)
                    hashCode = hashCode * 59 + EnoughExtractedText.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmlouvaPriloha left, SmlouvaPriloha right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmlouvaPriloha left, SmlouvaPriloha right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

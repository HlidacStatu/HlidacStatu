/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse2003 : IEquatable<InlineResponse2003>
    { 
        /// <summary>
        /// IČO firmy
        /// </summary>
        /// <value>IČO firmy</value>
        [Required]
        [DataMember(Name="ICO")]
        public string ICO { get; set; }

        /// <summary>
        /// Jméno firmy
        /// </summary>
        /// <value>Jméno firmy</value>
        [Required]
        [DataMember(Name="Jmeno")]
        public string Jmeno { get; set; }

        /// <summary>
        /// Seznam identifikátorů datových stránek, které firmě náleží
        /// </summary>
        /// <value>Seznam identifikátorů datových stránek, které firmě náleží</value>
        [Required]
        [DataMember(Name="DatovaSchranka")]
        public List<string> DatovaSchranka { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2003 {\n");
            sb.Append("  ICO: ").Append(ICO).Append("\n");
            sb.Append("  Jmeno: ").Append(Jmeno).Append("\n");
            sb.Append("  DatovaSchranka: ").Append(DatovaSchranka).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse2003)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse2003 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse2003 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2003 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ICO == other.ICO ||
                    ICO != null &&
                    ICO.Equals(other.ICO)
                ) && 
                (
                    Jmeno == other.Jmeno ||
                    Jmeno != null &&
                    Jmeno.Equals(other.Jmeno)
                ) && 
                (
                    DatovaSchranka == other.DatovaSchranka ||
                    DatovaSchranka != null &&
                    DatovaSchranka.SequenceEqual(other.DatovaSchranka)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ICO != null)
                    hashCode = hashCode * 59 + ICO.GetHashCode();
                    if (Jmeno != null)
                    hashCode = hashCode * 59 + Jmeno.GetHashCode();
                    if (DatovaSchranka != null)
                    hashCode = hashCode * 59 + DatovaSchranka.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse2003 left, InlineResponse2003 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse2003 left, InlineResponse2003 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SmlouvaIssues : IEquatable<SmlouvaIssues>
    { 
        /// <summary>
        /// ID problému; seznam ID zatím nezveřejněn
        /// </summary>
        /// <value>ID problému; seznam ID zatím nezveřejněn</value>
        [Required]
        [DataMember(Name="IssueTypeId")]
        public int? IssueTypeId { get; set; }

        /// <summary>
        /// kdy byl záznam o problému vytvořen
        /// </summary>
        /// <value>kdy byl záznam o problému vytvořen</value>
        [Required]
        [DataMember(Name="Created")]
        public string Created { get; set; }

        /// <summary>
        /// krátký popis problému
        /// </summary>
        /// <value>krátký popis problému</value>
        [Required]
        [DataMember(Name="Title")]
        public string Title { get; set; }

        /// <summary>
        /// dlouhý popis problému
        /// </summary>
        /// <value>dlouhý popis problému</value>
        [Required]
        [DataMember(Name="TextDescription")]
        public string TextDescription { get; set; }

        /// <summary>
        /// neveřejná poznámka
        /// </summary>
        /// <value>neveřejná poznámka</value>
        [Required]
        [DataMember(Name="Public")]
        public bool? Public { get; set; }

        /// <summary>
        /// problém je trvalý
        /// </summary>
        /// <value>problém je trvalý</value>
        [Required]
        [DataMember(Name="Permanent")]
        public bool? Permanent { get; set; }

        /// <summary>
        /// problém je důležitý
        /// </summary>
        /// <value>problém je důležitý</value>
        [Required]
        [DataMember(Name="Importance")]
        public int? Importance { get; set; }

        /// <summary>
        /// dodatečná data analyzéru
        /// </summary>
        /// <value>dodatečná data analyzéru</value>
        [Required]
        [DataMember(Name="AffectedParams")]
        public  AffectedParams { get; set; }

        /// <summary>
        /// jméno použitého analyzéru
        /// </summary>
        /// <value>jméno použitého analyzéru</value>
        [Required]
        [DataMember(Name="AnalyzerType")]
        public string AnalyzerType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmlouvaIssues {\n");
            sb.Append("  IssueTypeId: ").Append(IssueTypeId).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TextDescription: ").Append(TextDescription).Append("\n");
            sb.Append("  Public: ").Append(Public).Append("\n");
            sb.Append("  Permanent: ").Append(Permanent).Append("\n");
            sb.Append("  Importance: ").Append(Importance).Append("\n");
            sb.Append("  AffectedParams: ").Append(AffectedParams).Append("\n");
            sb.Append("  AnalyzerType: ").Append(AnalyzerType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmlouvaIssues)obj);
        }

        /// <summary>
        /// Returns true if SmlouvaIssues instances are equal
        /// </summary>
        /// <param name="other">Instance of SmlouvaIssues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmlouvaIssues other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IssueTypeId == other.IssueTypeId ||
                    IssueTypeId != null &&
                    IssueTypeId.Equals(other.IssueTypeId)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    TextDescription == other.TextDescription ||
                    TextDescription != null &&
                    TextDescription.Equals(other.TextDescription)
                ) && 
                (
                    Public == other.Public ||
                    Public != null &&
                    Public.Equals(other.Public)
                ) && 
                (
                    Permanent == other.Permanent ||
                    Permanent != null &&
                    Permanent.Equals(other.Permanent)
                ) && 
                (
                    Importance == other.Importance ||
                    Importance != null &&
                    Importance.Equals(other.Importance)
                ) && 
                (
                    AffectedParams == other.AffectedParams ||
                    AffectedParams != null &&
                    AffectedParams.Equals(other.AffectedParams)
                ) && 
                (
                    AnalyzerType == other.AnalyzerType ||
                    AnalyzerType != null &&
                    AnalyzerType.Equals(other.AnalyzerType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IssueTypeId != null)
                    hashCode = hashCode * 59 + IssueTypeId.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (TextDescription != null)
                    hashCode = hashCode * 59 + TextDescription.GetHashCode();
                    if (Public != null)
                    hashCode = hashCode * 59 + Public.GetHashCode();
                    if (Permanent != null)
                    hashCode = hashCode * 59 + Permanent.GetHashCode();
                    if (Importance != null)
                    hashCode = hashCode * 59 + Importance.GetHashCode();
                    if (AffectedParams != null)
                    hashCode = hashCode * 59 + AffectedParams.GetHashCode();
                    if (AnalyzerType != null)
                    hashCode = hashCode * 59 + AnalyzerType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmlouvaIssues left, SmlouvaIssues right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmlouvaIssues left, SmlouvaIssues right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

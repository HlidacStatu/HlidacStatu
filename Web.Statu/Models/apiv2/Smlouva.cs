/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Smlouva : IEquatable<Smlouva>
    { 
        /// <summary>
        /// Gets or Sets Identifikator
        /// </summary>
        [Required]
        [DataMember(Name="identifikator")]
        public SmlouvaIdentifikator Identifikator { get; set; }

        /// <summary>
        /// ID verze smlouvy (z registru smluv), unikátní
        /// </summary>
        /// <value>ID verze smlouvy (z registru smluv), unikátní</value>
        [Required]
        [DataMember(Name="Id")]
        public string Id { get; set; }

        /// <summary>
        /// odkaz na záznam v registru smluv
        /// </summary>
        /// <value>odkaz na záznam v registru smluv</value>
        [Required]
        [DataMember(Name="odkaz")]
        public string Odkaz { get; set; }

        /// <summary>
        /// datum zveřejnění v registru smluv
        /// </summary>
        /// <value>datum zveřejnění v registru smluv</value>
        [Required]
        [DataMember(Name="casZverejneni")]
        public string CasZverejneni { get; set; }

        /// <summary>
        /// jméno osoby (z registru smluv)
        /// </summary>
        /// <value>jméno osoby (z registru smluv)</value>
        [Required]
        [DataMember(Name="schvalil")]
        public string Schvalil { get; set; }

        /// <summary>
        /// Gets or Sets HodnotaBezDph
        /// </summary>
        [Required]
        [DataMember(Name="hodnotaBezDph")]
        public decimal? HodnotaBezDph { get; set; }

        /// <summary>
        /// Gets or Sets HodnotaVcetneDph
        /// </summary>
        [Required]
        [DataMember(Name="hodnotaVcetneDph")]
        public decimal? HodnotaVcetneDph { get; set; }

        /// <summary>
        /// Gets or Sets CiziMena
        /// </summary>
        [Required]
        [DataMember(Name="ciziMena")]
        public SmlouvaCiziMena CiziMena { get; set; }

        /// <summary>
        /// pokud je false, jde o zneplatnenou smlouvu
        /// </summary>
        /// <value>pokud je false, jde o zneplatnenou smlouvu</value>
        [Required]
        [DataMember(Name="platnyZaznam")]
        public bool? PlatnyZaznam { get; set; }

        /// <summary>
        /// 0 &#x3D; neznámý  1 &#x3D; do 1. 7. 2017: bez sankcí v případě neodeslání smlouvy do registru  2 &#x3D; po 1. 7. 2017 včetně: možnost sankcí (zneplatnění) v případě neodeslání smlouvy do registru  3 &#x3D; před zákonem o Registru smluv 
        /// </summary>
        /// <value>0 &#x3D; neznámý  1 &#x3D; do 1. 7. 2017: bez sankcí v případě neodeslání smlouvy do registru  2 &#x3D; po 1. 7. 2017 včetně: možnost sankcí (zneplatnění) v případě neodeslání smlouvy do registru  3 &#x3D; před zákonem o Registru smluv </value>
        [Required]
        [DataMember(Name="PravniRamec")]
        public int? PravniRamec { get; set; }

        /// <summary>
        /// Gets or Sets Predmet
        /// </summary>
        [Required]
        [DataMember(Name="predmet")]
        public string Predmet { get; set; }

        /// <summary>
        /// Gets or Sets DatumUzavreni
        /// </summary>
        [Required]
        [DataMember(Name="datumUzavreni")]
        public string DatumUzavreni { get; set; }

        /// <summary>
        /// Gets or Sets CisloSmlouvy
        /// </summary>
        [Required]
        [DataMember(Name="cisloSmlouvy")]
        public string CisloSmlouvy { get; set; }

        /// <summary>
        /// ID verze smlouvy, která je na tento záznam navázaná (typicky předchozí verze)
        /// </summary>
        /// <value>ID verze smlouvy, která je na tento záznam navázaná (typicky předchozí verze)</value>
        [Required]
        [DataMember(Name="navazanyZaznam")]
        public string NavazanyZaznam { get; set; }

        /// <summary>
        /// ID verze smluv, které se týkají stejných smluvních stran a podobných témat
        /// </summary>
        /// <value>ID verze smluv, které se týkají stejných smluvních stran a podobných témat</value>
        [Required]
        [DataMember(Name="souvisejiciSmlouvy")]
        public List<string> SouvisejiciSmlouvy { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [Required]
        [DataMember(Name="LastUpdate")]
        public string LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets CalculatedPriceWithVATinCZK
        /// </summary>
        [Required]
        [DataMember(Name="CalculatedPriceWithVATinCZK")]
        public decimal? CalculatedPriceWithVATinCZK { get; set; }

        /// <summary>
        /// přesnost výpočtu ceny s Kč s DPH  * 0 &#x3D; cena neuvedena * 1 &#x3D; přesná * 2 &#x3D; spočítaný odhad 
        /// </summary>
        /// <value>přesnost výpočtu ceny s Kč s DPH  * 0 &#x3D; cena neuvedena * 1 &#x3D; přesná * 2 &#x3D; spočítaný odhad </value>
        [Required]
        [DataMember(Name="CalcutatedPriceQuality")]
        public int? CalcutatedPriceQuality { get; set; }

        /// <summary>
        /// míra chybovosti smlouvy
        /// </summary>
        /// <value>míra chybovosti smlouvy</value>
        [Required]
        [DataMember(Name="ConfidenceValue")]
        public decimal? ConfidenceValue { get; set; }

        /// <summary>
        /// Gets or Sets VkladatelDoRejstriku
        /// </summary>
        [Required]
        [DataMember(Name="VkladatelDoRejstriku")]
        public SmlouvaSubjekt VkladatelDoRejstriku { get; set; }

        /// <summary>
        /// Gets or Sets Platce
        /// </summary>
        [Required]
        [DataMember(Name="Platce")]
        public SmlouvaSubjekt Platce { get; set; }

        /// <summary>
        /// Gets or Sets Prijemce
        /// </summary>
        [Required]
        [DataMember(Name="Prijemce")]
        public SmlouvaSubjekty Prijemce { get; set; }

        /// <summary>
        /// Gets or Sets Classification
        /// </summary>
        [Required]
        [DataMember(Name="Classification")]
        public SmlouvaClassification Classification { get; set; }

        /// <summary>
        /// seznam problémů, které smlouva má
        /// </summary>
        /// <value>seznam problémů, které smlouva má</value>
        [Required]
        [DataMember(Name="Issues")]
        public List<SmlouvaIssues> Issues { get; set; }

        /// <summary>
        /// provedené úpravy, doplnění smlouvy
        /// </summary>
        /// <value>provedené úpravy, doplnění smlouvy</value>
        [Required]
        [DataMember(Name="Enhancements")]
        public List<SmlouvaEnhancements> Enhancements { get; set; }

        /// <summary>
        /// Gets or Sets Prilohy
        /// </summary>
        [Required]
        [DataMember(Name="Prilohy")]
        public List<SmlouvaPriloha> Prilohy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Smlouva {\n");
            sb.Append("  Identifikator: ").Append(Identifikator).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Odkaz: ").Append(Odkaz).Append("\n");
            sb.Append("  CasZverejneni: ").Append(CasZverejneni).Append("\n");
            sb.Append("  Schvalil: ").Append(Schvalil).Append("\n");
            sb.Append("  HodnotaBezDph: ").Append(HodnotaBezDph).Append("\n");
            sb.Append("  HodnotaVcetneDph: ").Append(HodnotaVcetneDph).Append("\n");
            sb.Append("  CiziMena: ").Append(CiziMena).Append("\n");
            sb.Append("  PlatnyZaznam: ").Append(PlatnyZaznam).Append("\n");
            sb.Append("  PravniRamec: ").Append(PravniRamec).Append("\n");
            sb.Append("  Predmet: ").Append(Predmet).Append("\n");
            sb.Append("  DatumUzavreni: ").Append(DatumUzavreni).Append("\n");
            sb.Append("  CisloSmlouvy: ").Append(CisloSmlouvy).Append("\n");
            sb.Append("  NavazanyZaznam: ").Append(NavazanyZaznam).Append("\n");
            sb.Append("  SouvisejiciSmlouvy: ").Append(SouvisejiciSmlouvy).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  CalculatedPriceWithVATinCZK: ").Append(CalculatedPriceWithVATinCZK).Append("\n");
            sb.Append("  CalcutatedPriceQuality: ").Append(CalcutatedPriceQuality).Append("\n");
            sb.Append("  ConfidenceValue: ").Append(ConfidenceValue).Append("\n");
            sb.Append("  VkladatelDoRejstriku: ").Append(VkladatelDoRejstriku).Append("\n");
            sb.Append("  Platce: ").Append(Platce).Append("\n");
            sb.Append("  Prijemce: ").Append(Prijemce).Append("\n");
            sb.Append("  Classification: ").Append(Classification).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  Enhancements: ").Append(Enhancements).Append("\n");
            sb.Append("  Prilohy: ").Append(Prilohy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Smlouva)obj);
        }

        /// <summary>
        /// Returns true if Smlouva instances are equal
        /// </summary>
        /// <param name="other">Instance of Smlouva to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Smlouva other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identifikator == other.Identifikator ||
                    Identifikator != null &&
                    Identifikator.Equals(other.Identifikator)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Odkaz == other.Odkaz ||
                    Odkaz != null &&
                    Odkaz.Equals(other.Odkaz)
                ) && 
                (
                    CasZverejneni == other.CasZverejneni ||
                    CasZverejneni != null &&
                    CasZverejneni.Equals(other.CasZverejneni)
                ) && 
                (
                    Schvalil == other.Schvalil ||
                    Schvalil != null &&
                    Schvalil.Equals(other.Schvalil)
                ) && 
                (
                    HodnotaBezDph == other.HodnotaBezDph ||
                    HodnotaBezDph != null &&
                    HodnotaBezDph.Equals(other.HodnotaBezDph)
                ) && 
                (
                    HodnotaVcetneDph == other.HodnotaVcetneDph ||
                    HodnotaVcetneDph != null &&
                    HodnotaVcetneDph.Equals(other.HodnotaVcetneDph)
                ) && 
                (
                    CiziMena == other.CiziMena ||
                    CiziMena != null &&
                    CiziMena.Equals(other.CiziMena)
                ) && 
                (
                    PlatnyZaznam == other.PlatnyZaznam ||
                    PlatnyZaznam != null &&
                    PlatnyZaznam.Equals(other.PlatnyZaznam)
                ) && 
                (
                    PravniRamec == other.PravniRamec ||
                    PravniRamec != null &&
                    PravniRamec.Equals(other.PravniRamec)
                ) && 
                (
                    Predmet == other.Predmet ||
                    Predmet != null &&
                    Predmet.Equals(other.Predmet)
                ) && 
                (
                    DatumUzavreni == other.DatumUzavreni ||
                    DatumUzavreni != null &&
                    DatumUzavreni.Equals(other.DatumUzavreni)
                ) && 
                (
                    CisloSmlouvy == other.CisloSmlouvy ||
                    CisloSmlouvy != null &&
                    CisloSmlouvy.Equals(other.CisloSmlouvy)
                ) && 
                (
                    NavazanyZaznam == other.NavazanyZaznam ||
                    NavazanyZaznam != null &&
                    NavazanyZaznam.Equals(other.NavazanyZaznam)
                ) && 
                (
                    SouvisejiciSmlouvy == other.SouvisejiciSmlouvy ||
                    SouvisejiciSmlouvy != null &&
                    SouvisejiciSmlouvy.SequenceEqual(other.SouvisejiciSmlouvy)
                ) && 
                (
                    LastUpdate == other.LastUpdate ||
                    LastUpdate != null &&
                    LastUpdate.Equals(other.LastUpdate)
                ) && 
                (
                    CalculatedPriceWithVATinCZK == other.CalculatedPriceWithVATinCZK ||
                    CalculatedPriceWithVATinCZK != null &&
                    CalculatedPriceWithVATinCZK.Equals(other.CalculatedPriceWithVATinCZK)
                ) && 
                (
                    CalcutatedPriceQuality == other.CalcutatedPriceQuality ||
                    CalcutatedPriceQuality != null &&
                    CalcutatedPriceQuality.Equals(other.CalcutatedPriceQuality)
                ) && 
                (
                    ConfidenceValue == other.ConfidenceValue ||
                    ConfidenceValue != null &&
                    ConfidenceValue.Equals(other.ConfidenceValue)
                ) && 
                (
                    VkladatelDoRejstriku == other.VkladatelDoRejstriku ||
                    VkladatelDoRejstriku != null &&
                    VkladatelDoRejstriku.Equals(other.VkladatelDoRejstriku)
                ) && 
                (
                    Platce == other.Platce ||
                    Platce != null &&
                    Platce.Equals(other.Platce)
                ) && 
                (
                    Prijemce == other.Prijemce ||
                    Prijemce != null &&
                    Prijemce.Equals(other.Prijemce)
                ) && 
                (
                    Classification == other.Classification ||
                    Classification != null &&
                    Classification.Equals(other.Classification)
                ) && 
                (
                    Issues == other.Issues ||
                    Issues != null &&
                    Issues.SequenceEqual(other.Issues)
                ) && 
                (
                    Enhancements == other.Enhancements ||
                    Enhancements != null &&
                    Enhancements.SequenceEqual(other.Enhancements)
                ) && 
                (
                    Prilohy == other.Prilohy ||
                    Prilohy != null &&
                    Prilohy.SequenceEqual(other.Prilohy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identifikator != null)
                    hashCode = hashCode * 59 + Identifikator.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Odkaz != null)
                    hashCode = hashCode * 59 + Odkaz.GetHashCode();
                    if (CasZverejneni != null)
                    hashCode = hashCode * 59 + CasZverejneni.GetHashCode();
                    if (Schvalil != null)
                    hashCode = hashCode * 59 + Schvalil.GetHashCode();
                    if (HodnotaBezDph != null)
                    hashCode = hashCode * 59 + HodnotaBezDph.GetHashCode();
                    if (HodnotaVcetneDph != null)
                    hashCode = hashCode * 59 + HodnotaVcetneDph.GetHashCode();
                    if (CiziMena != null)
                    hashCode = hashCode * 59 + CiziMena.GetHashCode();
                    if (PlatnyZaznam != null)
                    hashCode = hashCode * 59 + PlatnyZaznam.GetHashCode();
                    if (PravniRamec != null)
                    hashCode = hashCode * 59 + PravniRamec.GetHashCode();
                    if (Predmet != null)
                    hashCode = hashCode * 59 + Predmet.GetHashCode();
                    if (DatumUzavreni != null)
                    hashCode = hashCode * 59 + DatumUzavreni.GetHashCode();
                    if (CisloSmlouvy != null)
                    hashCode = hashCode * 59 + CisloSmlouvy.GetHashCode();
                    if (NavazanyZaznam != null)
                    hashCode = hashCode * 59 + NavazanyZaznam.GetHashCode();
                    if (SouvisejiciSmlouvy != null)
                    hashCode = hashCode * 59 + SouvisejiciSmlouvy.GetHashCode();
                    if (LastUpdate != null)
                    hashCode = hashCode * 59 + LastUpdate.GetHashCode();
                    if (CalculatedPriceWithVATinCZK != null)
                    hashCode = hashCode * 59 + CalculatedPriceWithVATinCZK.GetHashCode();
                    if (CalcutatedPriceQuality != null)
                    hashCode = hashCode * 59 + CalcutatedPriceQuality.GetHashCode();
                    if (ConfidenceValue != null)
                    hashCode = hashCode * 59 + ConfidenceValue.GetHashCode();
                    if (VkladatelDoRejstriku != null)
                    hashCode = hashCode * 59 + VkladatelDoRejstriku.GetHashCode();
                    if (Platce != null)
                    hashCode = hashCode * 59 + Platce.GetHashCode();
                    if (Prijemce != null)
                    hashCode = hashCode * 59 + Prijemce.GetHashCode();
                    if (Classification != null)
                    hashCode = hashCode * 59 + Classification.GetHashCode();
                    if (Issues != null)
                    hashCode = hashCode * 59 + Issues.GetHashCode();
                    if (Enhancements != null)
                    hashCode = hashCode * 59 + Enhancements.GetHashCode();
                    if (Prilohy != null)
                    hashCode = hashCode * 59 + Prilohy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Smlouva left, Smlouva right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Smlouva left, Smlouva right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

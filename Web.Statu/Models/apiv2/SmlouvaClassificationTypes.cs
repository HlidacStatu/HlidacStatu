/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SmlouvaClassificationTypes : IEquatable<SmlouvaClassificationTypes>
    { 
        /// <summary>
        /// viz https://github.com/HlidacStatu/HlidacStatu/blob/master/Lib/Data/Smlouva.SClassification.cs TODO
        /// </summary>
        /// <value>viz https://github.com/HlidacStatu/HlidacStatu/blob/master/Lib/Data/Smlouva.SClassification.cs TODO</value>
        [Required]
        [DataMember(Name="TypeValue")]
        public int? TypeValue { get; set; }

        /// <summary>
        /// Gets or Sets ClassifProbability
        /// </summary>
        [Required]
        [DataMember(Name="ClassifProbability")]
        public decimal? ClassifProbability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmlouvaClassificationTypes {\n");
            sb.Append("  TypeValue: ").Append(TypeValue).Append("\n");
            sb.Append("  ClassifProbability: ").Append(ClassifProbability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmlouvaClassificationTypes)obj);
        }

        /// <summary>
        /// Returns true if SmlouvaClassificationTypes instances are equal
        /// </summary>
        /// <param name="other">Instance of SmlouvaClassificationTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmlouvaClassificationTypes other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TypeValue == other.TypeValue ||
                    TypeValue != null &&
                    TypeValue.Equals(other.TypeValue)
                ) && 
                (
                    ClassifProbability == other.ClassifProbability ||
                    ClassifProbability != null &&
                    ClassifProbability.Equals(other.ClassifProbability)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TypeValue != null)
                    hashCode = hashCode * 59 + TypeValue.GetHashCode();
                    if (ClassifProbability != null)
                    hashCode = hashCode * 59 + ClassifProbability.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmlouvaClassificationTypes left, SmlouvaClassificationTypes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmlouvaClassificationTypes left, SmlouvaClassificationTypes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

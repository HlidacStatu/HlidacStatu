/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SmlouvaSubjekt : IEquatable<SmlouvaSubjekt>
    { 
        /// <summary>
        /// Gets or Sets DatovaSchranka
        /// </summary>
        [Required]
        [DataMember(Name="datovaSchranka")]
        public string DatovaSchranka { get; set; }

        /// <summary>
        /// Gets or Sets Nazev
        /// </summary>
        [Required]
        [DataMember(Name="nazev")]
        public string Nazev { get; set; }

        /// <summary>
        /// Gets or Sets Ico
        /// </summary>
        [Required]
        [DataMember(Name="ico")]
        public string Ico { get; set; }

        /// <summary>
        /// Gets or Sets Adresa
        /// </summary>
        [Required]
        [DataMember(Name="adresa")]
        public string Adresa { get; set; }

        /// <summary>
        /// Gets or Sets Utvar
        /// </summary>
        [Required]
        [DataMember(Name="utvar")]
        public string Utvar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmlouvaSubjekt {\n");
            sb.Append("  DatovaSchranka: ").Append(DatovaSchranka).Append("\n");
            sb.Append("  Nazev: ").Append(Nazev).Append("\n");
            sb.Append("  Ico: ").Append(Ico).Append("\n");
            sb.Append("  Adresa: ").Append(Adresa).Append("\n");
            sb.Append("  Utvar: ").Append(Utvar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmlouvaSubjekt)obj);
        }

        /// <summary>
        /// Returns true if SmlouvaSubjekt instances are equal
        /// </summary>
        /// <param name="other">Instance of SmlouvaSubjekt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmlouvaSubjekt other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DatovaSchranka == other.DatovaSchranka ||
                    DatovaSchranka != null &&
                    DatovaSchranka.Equals(other.DatovaSchranka)
                ) && 
                (
                    Nazev == other.Nazev ||
                    Nazev != null &&
                    Nazev.Equals(other.Nazev)
                ) && 
                (
                    Ico == other.Ico ||
                    Ico != null &&
                    Ico.Equals(other.Ico)
                ) && 
                (
                    Adresa == other.Adresa ||
                    Adresa != null &&
                    Adresa.Equals(other.Adresa)
                ) && 
                (
                    Utvar == other.Utvar ||
                    Utvar != null &&
                    Utvar.Equals(other.Utvar)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DatovaSchranka != null)
                    hashCode = hashCode * 59 + DatovaSchranka.GetHashCode();
                    if (Nazev != null)
                    hashCode = hashCode * 59 + Nazev.GetHashCode();
                    if (Ico != null)
                    hashCode = hashCode * 59 + Ico.GetHashCode();
                    if (Adresa != null)
                    hashCode = hashCode * 59 + Adresa.GetHashCode();
                    if (Utvar != null)
                    hashCode = hashCode * 59 + Utvar.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmlouvaSubjekt left, SmlouvaSubjekt right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmlouvaSubjekt left, SmlouvaSubjekt right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

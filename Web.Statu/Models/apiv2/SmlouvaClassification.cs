/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// klasifikace smlouvy podle oboru. Beta verze
    /// </summary>
    [DataContract]
    public partial class SmlouvaClassification : IEquatable<SmlouvaClassification>
    { 
        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [Required]
        [DataMember(Name="LastUpdate")]
        public string LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [Required]
        [DataMember(Name="Version")]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [Required]
        [DataMember(Name="Types")]
        public List<SmlouvaClassificationTypes> Types { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmlouvaClassification {\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmlouvaClassification)obj);
        }

        /// <summary>
        /// Returns true if SmlouvaClassification instances are equal
        /// </summary>
        /// <param name="other">Instance of SmlouvaClassification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmlouvaClassification other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LastUpdate == other.LastUpdate ||
                    LastUpdate != null &&
                    LastUpdate.Equals(other.LastUpdate)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    Types == other.Types ||
                    Types != null &&
                    Types.SequenceEqual(other.Types)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LastUpdate != null)
                    hashCode = hashCode * 59 + LastUpdate.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (Types != null)
                    hashCode = hashCode * 59 + Types.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmlouvaClassification left, SmlouvaClassification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmlouvaClassification left, SmlouvaClassification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

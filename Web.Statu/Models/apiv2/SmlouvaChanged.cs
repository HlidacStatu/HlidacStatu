/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// parametr, který byl změněn
    /// </summary>
    [DataContract]
    public partial class SmlouvaChanged : IEquatable<SmlouvaChanged>
    { 
        /// <summary>
        /// JSON cesta k parametru
        /// </summary>
        /// <value>JSON cesta k parametru</value>
        [Required]
        [DataMember(Name="ParameterName")]
        public string ParameterName { get; set; }

        /// <summary>
        /// Gets or Sets PreviousValue
        /// </summary>
        [Required]
        [DataMember(Name="PreviousValue")]
        public  PreviousValue { get; set; }

        /// <summary>
        /// Gets or Sets NewValue
        /// </summary>
        [Required]
        [DataMember(Name="NewValue")]
        public  NewValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmlouvaChanged {\n");
            sb.Append("  ParameterName: ").Append(ParameterName).Append("\n");
            sb.Append("  PreviousValue: ").Append(PreviousValue).Append("\n");
            sb.Append("  NewValue: ").Append(NewValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SmlouvaChanged)obj);
        }

        /// <summary>
        /// Returns true if SmlouvaChanged instances are equal
        /// </summary>
        /// <param name="other">Instance of SmlouvaChanged to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmlouvaChanged other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ParameterName == other.ParameterName ||
                    ParameterName != null &&
                    ParameterName.Equals(other.ParameterName)
                ) && 
                (
                    PreviousValue == other.PreviousValue ||
                    PreviousValue != null &&
                    PreviousValue.Equals(other.PreviousValue)
                ) && 
                (
                    NewValue == other.NewValue ||
                    NewValue != null &&
                    NewValue.Equals(other.NewValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ParameterName != null)
                    hashCode = hashCode * 59 + ParameterName.GetHashCode();
                    if (PreviousValue != null)
                    hashCode = hashCode * 59 + PreviousValue.GetHashCode();
                    if (NewValue != null)
                    hashCode = hashCode * 59 + NewValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SmlouvaChanged left, SmlouvaChanged right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SmlouvaChanged left, SmlouvaChanged right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VerejnaZakazkaPriloha : IEquatable<VerejnaZakazkaPriloha>
    { 
        /// <summary>
        /// Gets or Sets OficialUrl
        /// </summary>
        [Required]
        [DataMember(Name="oficialUrl")]
        public string OficialUrl { get; set; }

        /// <summary>
        /// např. \&quot;Dokument\&quot;, \&quot;Projektový plán\&quot;, \&quot;Dodatečné informace\&quot; atd.
        /// </summary>
        /// <value>např. \&quot;Dokument\&quot;, \&quot;Projektový plán\&quot;, \&quot;Dodatečné informace\&quot; atd.</value>
        [Required]
        [DataMember(Name="typDokumentu")]
        public string TypDokumentu { get; set; }

        /// <summary>
        /// datum, kdy byl dokument připojen k zakázce
        /// </summary>
        /// <value>datum, kdy byl dokument připojen k zakázce</value>
        [Required]
        [DataMember(Name="vlozenoNaProfil")]
        public string VlozenoNaProfil { get; set; }

        /// <summary>
        /// extrahovaný prostý text z přílohy
        /// </summary>
        /// <value>extrahovaný prostý text z přílohy</value>
        [Required]
        [DataMember(Name="plainText")]
        public string PlainText { get; set; }

        /// <summary>
        /// * Unknown &#x3D; 0, * Exact &#x3D; 1 - získáno z txt souboru, přesná podoba * Calculated &#x3D; 2, * Parsed &#x3D; 3,  - získáno strojově z dokumentu * Estimated &#x3D; 4,  - získáno pomocí OCR, nepřesné * AddedManual &#x3D; 5, - doplněno ručně 
        /// </summary>
        /// <value>* Unknown &#x3D; 0, * Exact &#x3D; 1 - získáno z txt souboru, přesná podoba * Calculated &#x3D; 2, * Parsed &#x3D; 3,  - získáno strojově z dokumentu * Estimated &#x3D; 4,  - získáno pomocí OCR, nepřesné * AddedManual &#x3D; 5, - doplněno ručně </value>
        [Required]
        [DataMember(Name="plainTextContentQuality")]
        public int? PlainTextContentQuality { get; set; }

        /// <summary>
        /// datum poslední aktualizace přílohy
        /// </summary>
        /// <value>datum poslední aktualizace přílohy</value>
        [Required]
        [DataMember(Name="lastUpdate")]
        public string LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets LastProcessed
        /// </summary>
        [Required]
        [DataMember(Name="lastProcessed")]
        public Object LastProcessed { get; set; }

        /// <summary>
        /// MIME typ přílohy
        /// </summary>
        /// <value>MIME typ přílohy</value>
        [Required]
        [DataMember(Name="contentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// Délka extrahovaného prostého textu
        /// </summary>
        /// <value>Délka extrahovaného prostého textu</value>
        [Required]
        [DataMember(Name="lenght")]
        public int? Lenght { get; set; }

        /// <summary>
        /// Počet slov v extrahovaném textu
        /// </summary>
        /// <value>Počet slov v extrahovaném textu</value>
        [Required]
        [DataMember(Name="wordCount")]
        public int? WordCount { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [Required]
        [DataMember(Name="pages")]
        public Object Pages { get; set; }

        /// <summary>
        /// Gets or Sets StorageId
        /// </summary>
        [Required]
        [DataMember(Name="storageId")]
        public Object StorageId { get; set; }

        /// <summary>
        /// Původní jméno souboru
        /// </summary>
        /// <value>Původní jméno souboru</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerejnaZakazkaPriloha {\n");
            sb.Append("  OficialUrl: ").Append(OficialUrl).Append("\n");
            sb.Append("  TypDokumentu: ").Append(TypDokumentu).Append("\n");
            sb.Append("  VlozenoNaProfil: ").Append(VlozenoNaProfil).Append("\n");
            sb.Append("  PlainText: ").Append(PlainText).Append("\n");
            sb.Append("  PlainTextContentQuality: ").Append(PlainTextContentQuality).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  LastProcessed: ").Append(LastProcessed).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Lenght: ").Append(Lenght).Append("\n");
            sb.Append("  WordCount: ").Append(WordCount).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  StorageId: ").Append(StorageId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VerejnaZakazkaPriloha)obj);
        }

        /// <summary>
        /// Returns true if VerejnaZakazkaPriloha instances are equal
        /// </summary>
        /// <param name="other">Instance of VerejnaZakazkaPriloha to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerejnaZakazkaPriloha other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OficialUrl == other.OficialUrl ||
                    OficialUrl != null &&
                    OficialUrl.Equals(other.OficialUrl)
                ) && 
                (
                    TypDokumentu == other.TypDokumentu ||
                    TypDokumentu != null &&
                    TypDokumentu.Equals(other.TypDokumentu)
                ) && 
                (
                    VlozenoNaProfil == other.VlozenoNaProfil ||
                    VlozenoNaProfil != null &&
                    VlozenoNaProfil.Equals(other.VlozenoNaProfil)
                ) && 
                (
                    PlainText == other.PlainText ||
                    PlainText != null &&
                    PlainText.Equals(other.PlainText)
                ) && 
                (
                    PlainTextContentQuality == other.PlainTextContentQuality ||
                    PlainTextContentQuality != null &&
                    PlainTextContentQuality.Equals(other.PlainTextContentQuality)
                ) && 
                (
                    LastUpdate == other.LastUpdate ||
                    LastUpdate != null &&
                    LastUpdate.Equals(other.LastUpdate)
                ) && 
                (
                    LastProcessed == other.LastProcessed ||
                    LastProcessed != null &&
                    LastProcessed.Equals(other.LastProcessed)
                ) && 
                (
                    ContentType == other.ContentType ||
                    ContentType != null &&
                    ContentType.Equals(other.ContentType)
                ) && 
                (
                    Lenght == other.Lenght ||
                    Lenght != null &&
                    Lenght.Equals(other.Lenght)
                ) && 
                (
                    WordCount == other.WordCount ||
                    WordCount != null &&
                    WordCount.Equals(other.WordCount)
                ) && 
                (
                    Pages == other.Pages ||
                    Pages != null &&
                    Pages.Equals(other.Pages)
                ) && 
                (
                    StorageId == other.StorageId ||
                    StorageId != null &&
                    StorageId.Equals(other.StorageId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OficialUrl != null)
                    hashCode = hashCode * 59 + OficialUrl.GetHashCode();
                    if (TypDokumentu != null)
                    hashCode = hashCode * 59 + TypDokumentu.GetHashCode();
                    if (VlozenoNaProfil != null)
                    hashCode = hashCode * 59 + VlozenoNaProfil.GetHashCode();
                    if (PlainText != null)
                    hashCode = hashCode * 59 + PlainText.GetHashCode();
                    if (PlainTextContentQuality != null)
                    hashCode = hashCode * 59 + PlainTextContentQuality.GetHashCode();
                    if (LastUpdate != null)
                    hashCode = hashCode * 59 + LastUpdate.GetHashCode();
                    if (LastProcessed != null)
                    hashCode = hashCode * 59 + LastProcessed.GetHashCode();
                    if (ContentType != null)
                    hashCode = hashCode * 59 + ContentType.GetHashCode();
                    if (Lenght != null)
                    hashCode = hashCode * 59 + Lenght.GetHashCode();
                    if (WordCount != null)
                    hashCode = hashCode * 59 + WordCount.GetHashCode();
                    if (Pages != null)
                    hashCode = hashCode * 59 + Pages.GetHashCode();
                    if (StorageId != null)
                    hashCode = hashCode * 59 + StorageId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VerejnaZakazkaPriloha left, VerejnaZakazkaPriloha right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VerejnaZakazkaPriloha left, VerejnaZakazkaPriloha right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

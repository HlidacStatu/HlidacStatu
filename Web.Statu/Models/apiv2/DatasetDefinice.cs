/*
 * REST API Hlídače státu
 *
 * REST API Hlídače státu
 *
 * OpenAPI spec version: 2.0.0
 * Contact: podpora@hlidacstatu.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace HlidacStatu.Web.Models.Apiv2
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DatasetDefinice : IEquatable<DatasetDefinice>
    { 
        /// <summary>
        /// Jméno datové sady
        /// </summary>
        /// <value>Jméno datové sady</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// URL, z něhož se čerpají data
        /// </summary>
        /// <value>URL, z něhož se čerpají data</value>
        [Required]
        [DataMember(Name="origUrl")]
        public string OrigUrl { get; set; }

        /// <summary>
        /// URL, kde jsou umístěné zdrojové kódy, pomocí kterých byly data extrahovány
        /// </summary>
        /// <value>URL, kde jsou umístěné zdrojové kódy, pomocí kterých byly data extrahovány</value>
        [Required]
        [DataMember(Name="sourcecodeUrl")]
        public string SourcecodeUrl { get; set; }

        /// <summary>
        /// Delší popis datové sady
        /// </summary>
        /// <value>Delší popis datové sady</value>
        [Required]
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// JSON Schema (viz &lt;https://json-schema.org/&gt;) záznamu v datové sadě. **Musí se vložit jako serializovaný JSON string.** Musí splňovat několik pravidel: * Vlastnost &#x60;&#x60;Id&#x60;&#x60; v rootu objektu - unikátní identifikátor objektu. Musí být typu &#x60;&#x60;string&#x60;&#x60;. * Rezervované názvy vlastností, nepoužívejte ve schématu ani v objektech   * &#x60;&#x60;DbCreated&#x60;&#x60;: obsahuje datum vložení objektu do databáze.   * &#x60;&#x60;db.DbCreatedBy&#x60;&#x60;: obsahuje info o uživateli,     který objekt do db vložil. Tento údaj není poskytován veřejně. * vlastnost &#x60;&#x60;ICO&#x60;&#x60; kdekoliv (i ve vložených objektech) - pokud je typu &#x60;&#x60;string&#x60;&#x60;, pak Hlídač státu předpokládá,   že se jedná IČ subjektu a propojí záznam s firmami v Hlídači státu. * vlastnost &#x60;&#x60;OsobaId&#x60;&#x60; kdekoliv (i ve vložených objektech) - pokud jde o &#x60;&#x60;string&#x60;&#x60;, pak Hlídač   Státu předpokládá, že se jedná o identifikátor osoby z databáze Hlídače státu. Pro nalezení použijte   endpoint /osoby/hledat_presne. * vlastnost &#x60;&#x60;Url&#x60;&#x60; v rootu objektu - pokud dává smysl, měl by odkazovat na zdrojový záznam. * vlastnost &#x60;&#x60;HsProcessType&#x60;&#x60; kdekoliv, v kombinaci s dalšími atributy (viz dále),   zajistí následné zpracování záznamu na serveru a doplnění údajů na straně Hlídače.  Pokud libovolný objekt (v rootu, v poli či ve vložených objektech) obsahuje vlastnost &#x60;&#x60;HsProcessType&#x60;&#x60; s některou z definovaných hodnot, je takový objekt následně a asynchronně zpracován a doplněn o další údaje na straně Hlídače.  &#x60;&#x60;\&quot;HsProcessType\&quot;: \&quot;person\&quot;&#x60;&#x60;: definuje, že se jedná o objekt obsahující údaje o osobě, kterou chcete provázat s databází osob Hlídače. Tento typ předpokládá, že je uveden u objektu obsahující tyto atributy: * &#x60;&#x60;Jmeno&#x60;&#x60; nebo &#x60;&#x60;Name&#x60;&#x60; (&#x60;&#x60;string&#x60;&#x60;) * &#x60;&#x60;Prijmeni&#x60;&#x60; nebo &#x60;&#x60;Surname&#x60;&#x60; (string)   * místo &#x60;&#x60;Jmeno&#x60;&#x60; a &#x60;&#x60;Prijmeni&#x60;&#x60; pouze jeden atribut &#x60;&#x60;CeleJmeno&#x60;&#x60; nebo &#x60;&#x60;Fullname&#x60;&#x60; * &#x60;&#x60;Narozeni&#x60;&#x60; nebo &#x60;&#x60;Birthdate&#x60;&#x60; (&#x60;&#x60;string&#x60;&#x60; ve tvaru &#x60;&#x60;YYYY-MM-DD&#x60;&#x60;) * &#x60;&#x60;OsobaId&#x60;&#x60;  Hodnota &#x60;&#x60;OsobaId&#x60;&#x60; nemusí být vyplněna. Při vložení záznamu do datasetu, pokud &#x60;&#x60;OsobaId&#x60;&#x60; není vyplněna, Hlídač automaticky doplní &#x60;&#x60;OsobaId&#x60;&#x60; a prováže tak záznam s databází osob Hlídače. Všechny uvedené atributy **včetně** OsobaId musí být uvedeny v JSONSchema datasetu.  &#x60;&#x60;\&quot;HsProcessType\&quot;: \&quot;document\&quot;&#x60;&#x60;: definuje, že se jedná o objekt obsahující odkaz na dokument, který je potřeba stáhnout a umožnit jeho fulltextové prohledávání. Tento typ předpokládá, že je uveden u objektu obsahující tyto atributy:  * &#x60;&#x60;DocumentUrl&#x60;&#x60; (&#x60;&#x60;string&#x60;&#x60;) * &#x60;&#x60;DocumentPlainText&#x60;&#x60; (&#x60;&#x60;string&#x60;&#x60;)  Hodnota &#x60;&#x60;DocumentPlainText&#x60;&#x60; nemusí být vyplněna. Po vložení záznamu do Datasetu Hlídač automaticky dokument stáhne, vydoluje data a doplní &#x60;&#x60;DocumentPlainText&#x60;&#x60;. Tato operace se provede asynchronně během několika minut až hodin. Všechny uvedené atributy včetně DocumentPlainText musí být uvedeny v JSONSchema datasetu. 
        /// </summary>
        /// <value>JSON Schema (viz &lt;https://json-schema.org/&gt;) záznamu v datové sadě. **Musí se vložit jako serializovaný JSON string.** Musí splňovat několik pravidel: * Vlastnost &#x60;&#x60;Id&#x60;&#x60; v rootu objektu - unikátní identifikátor objektu. Musí být typu &#x60;&#x60;string&#x60;&#x60;. * Rezervované názvy vlastností, nepoužívejte ve schématu ani v objektech   * &#x60;&#x60;DbCreated&#x60;&#x60;: obsahuje datum vložení objektu do databáze.   * &#x60;&#x60;db.DbCreatedBy&#x60;&#x60;: obsahuje info o uživateli,     který objekt do db vložil. Tento údaj není poskytován veřejně. * vlastnost &#x60;&#x60;ICO&#x60;&#x60; kdekoliv (i ve vložených objektech) - pokud je typu &#x60;&#x60;string&#x60;&#x60;, pak Hlídač státu předpokládá,   že se jedná IČ subjektu a propojí záznam s firmami v Hlídači státu. * vlastnost &#x60;&#x60;OsobaId&#x60;&#x60; kdekoliv (i ve vložených objektech) - pokud jde o &#x60;&#x60;string&#x60;&#x60;, pak Hlídač   Státu předpokládá, že se jedná o identifikátor osoby z databáze Hlídače státu. Pro nalezení použijte   endpoint /osoby/hledat_presne. * vlastnost &#x60;&#x60;Url&#x60;&#x60; v rootu objektu - pokud dává smysl, měl by odkazovat na zdrojový záznam. * vlastnost &#x60;&#x60;HsProcessType&#x60;&#x60; kdekoliv, v kombinaci s dalšími atributy (viz dále),   zajistí následné zpracování záznamu na serveru a doplnění údajů na straně Hlídače.  Pokud libovolný objekt (v rootu, v poli či ve vložených objektech) obsahuje vlastnost &#x60;&#x60;HsProcessType&#x60;&#x60; s některou z definovaných hodnot, je takový objekt následně a asynchronně zpracován a doplněn o další údaje na straně Hlídače.  &#x60;&#x60;\&quot;HsProcessType\&quot;: \&quot;person\&quot;&#x60;&#x60;: definuje, že se jedná o objekt obsahující údaje o osobě, kterou chcete provázat s databází osob Hlídače. Tento typ předpokládá, že je uveden u objektu obsahující tyto atributy: * &#x60;&#x60;Jmeno&#x60;&#x60; nebo &#x60;&#x60;Name&#x60;&#x60; (&#x60;&#x60;string&#x60;&#x60;) * &#x60;&#x60;Prijmeni&#x60;&#x60; nebo &#x60;&#x60;Surname&#x60;&#x60; (string)   * místo &#x60;&#x60;Jmeno&#x60;&#x60; a &#x60;&#x60;Prijmeni&#x60;&#x60; pouze jeden atribut &#x60;&#x60;CeleJmeno&#x60;&#x60; nebo &#x60;&#x60;Fullname&#x60;&#x60; * &#x60;&#x60;Narozeni&#x60;&#x60; nebo &#x60;&#x60;Birthdate&#x60;&#x60; (&#x60;&#x60;string&#x60;&#x60; ve tvaru &#x60;&#x60;YYYY-MM-DD&#x60;&#x60;) * &#x60;&#x60;OsobaId&#x60;&#x60;  Hodnota &#x60;&#x60;OsobaId&#x60;&#x60; nemusí být vyplněna. Při vložení záznamu do datasetu, pokud &#x60;&#x60;OsobaId&#x60;&#x60; není vyplněna, Hlídač automaticky doplní &#x60;&#x60;OsobaId&#x60;&#x60; a prováže tak záznam s databází osob Hlídače. Všechny uvedené atributy **včetně** OsobaId musí být uvedeny v JSONSchema datasetu.  &#x60;&#x60;\&quot;HsProcessType\&quot;: \&quot;document\&quot;&#x60;&#x60;: definuje, že se jedná o objekt obsahující odkaz na dokument, který je potřeba stáhnout a umožnit jeho fulltextové prohledávání. Tento typ předpokládá, že je uveden u objektu obsahující tyto atributy:  * &#x60;&#x60;DocumentUrl&#x60;&#x60; (&#x60;&#x60;string&#x60;&#x60;) * &#x60;&#x60;DocumentPlainText&#x60;&#x60; (&#x60;&#x60;string&#x60;&#x60;)  Hodnota &#x60;&#x60;DocumentPlainText&#x60;&#x60; nemusí být vyplněna. Po vložení záznamu do Datasetu Hlídač automaticky dokument stáhne, vydoluje data a doplní &#x60;&#x60;DocumentPlainText&#x60;&#x60;. Tato operace se provede asynchronně během několika minut až hodin. Všechny uvedené atributy včetně DocumentPlainText musí být uvedeny v JSONSchema datasetu. </value>
        [Required]
        [DataMember(Name="jsonSchema")]
        public string JsonSchema { get; set; }

        /// <summary>
        /// E-mailová adresa toho, kdo dataset vytvořil a spravuje ho
        /// </summary>
        /// <value>E-mailová adresa toho, kdo dataset vytvořil a spravuje ho</value>
        [Required]
        [DataMember(Name="createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Datum a čas vytvoření datové sady. Při zakládání nové datové sady se doplní automaticky.
        /// </summary>
        /// <value>Datum a čas vytvoření datové sady. Při zakládání nové datové sady se doplní automaticky.</value>
        [DataMember(Name="created")]
        public string Created { get; set; }

        /// <summary>
        /// Pokud je &#x60;&#x60;true&#x60;&#x60;, pak se nezobrazuje v seznamu datových zdrojů na &lt;https://www.hlidacstatu.cz/data&gt;. (Na &lt;https://www.hlidacstatu.cz/data?beta&#x3D;1&gt; se zobrazí všechny datové zdroje.) 
        /// </summary>
        /// <value>Pokud je &#x60;&#x60;true&#x60;&#x60;, pak se nezobrazuje v seznamu datových zdrojů na &lt;https://www.hlidacstatu.cz/data&gt;. (Na &lt;https://www.hlidacstatu.cz/data?beta&#x3D;1&gt; se zobrazí všechny datové zdroje.) </value>
        [Required]
        [DataMember(Name="betaversion")]
        public bool? Betaversion { get; set; }

        /// <summary>
        /// Pokud je &#x60;&#x60;true&#x60;&#x60;, pak data v datasetu může kdokoliv přepsat nebo smazat; stejně tak může měni definici datové sady. Pokud je &#x60;&#x60;false&#x60;&#x60;, pak kdokoliv může data přidat, ale nemůže je přepsat či smazat. Nemůže také měnit parametry registrace datasetu. 
        /// </summary>
        /// <value>Pokud je &#x60;&#x60;true&#x60;&#x60;, pak data v datasetu může kdokoliv přepsat nebo smazat; stejně tak může měni definici datové sady. Pokud je &#x60;&#x60;false&#x60;&#x60;, pak kdokoliv může data přidat, ale nemůže je přepsat či smazat. Nemůže také měnit parametry registrace datasetu. </value>
        [Required]
        [DataMember(Name="allowWriteAccess")]
        public bool? AllowWriteAccess { get; set; }

        /// <summary>
        /// Ve výchozí hodnotě vždy &#x60;&#x60;false&#x60;&#x60;. Některé interní datasety jsou skryté, pak se nikdy nezobrazí. Může nastavit pouze administrátor. 
        /// </summary>
        /// <value>Ve výchozí hodnotě vždy &#x60;&#x60;false&#x60;&#x60;. Některé interní datasety jsou skryté, pak se nikdy nezobrazí. Může nastavit pouze administrátor. </value>
        [DataMember(Name="hidden")]
        public bool? Hidden { get; set; }

        ///// <summary>
        ///// Gets or Sets SearchResultTemplate
        ///// </summary>
        //[Required]
        //[DataMember(Name="searchResultTemplate")]
        //public  SearchResultTemplate { get; set; }

        ///// <summary>
        ///// Gets or Sets DetailTemplate
        ///// </summary>
        //[Required]
        //[DataMember(Name="detailTemplate")]
        //public  DetailTemplate { get; set; }

        ///// <summary>
        ///// Seznam parametrů, podle kterých je možné řadit výsledky.
        ///// </summary>
        ///// <value>Seznam parametrů, podle kterých je možné řadit výsledky.</value>
        //[Required]
        //[DataMember(Name="orderList")]
        //public Object OrderList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DatasetDefinice {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrigUrl: ").Append(OrigUrl).Append("\n");
            sb.Append("  SourcecodeUrl: ").Append(SourcecodeUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  JsonSchema: ").Append(JsonSchema).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Betaversion: ").Append(Betaversion).Append("\n");
            sb.Append("  AllowWriteAccess: ").Append(AllowWriteAccess).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            //sb.Append("  SearchResultTemplate: ").Append(SearchResultTemplate).Append("\n");
            //sb.Append("  DetailTemplate: ").Append(DetailTemplate).Append("\n");
            //sb.Append("  OrderList: ").Append(OrderList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DatasetDefinice)obj);
        }

        /// <summary>
        /// Returns true if DatasetDefinice instances are equal
        /// </summary>
        /// <param name="other">Instance of DatasetDefinice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DatasetDefinice other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) &&
                (
                    OrigUrl == other.OrigUrl ||
                    OrigUrl != null &&
                    OrigUrl.Equals(other.OrigUrl)
                ) &&
                (
                    SourcecodeUrl == other.SourcecodeUrl ||
                    SourcecodeUrl != null &&
                    SourcecodeUrl.Equals(other.SourcecodeUrl)
                ) &&
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) &&
                (
                    JsonSchema == other.JsonSchema ||
                    JsonSchema != null &&
                    JsonSchema.Equals(other.JsonSchema)
                ) &&
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) &&
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) &&
                (
                    Betaversion == other.Betaversion ||
                    Betaversion != null &&
                    Betaversion.Equals(other.Betaversion)
                ) &&
                (
                    AllowWriteAccess == other.AllowWriteAccess ||
                    AllowWriteAccess != null &&
                    AllowWriteAccess.Equals(other.AllowWriteAccess)
                ) &&
                (
                    Hidden == other.Hidden ||
                    Hidden != null &&
                    Hidden.Equals(other.Hidden)
                );// && 
                //(
                //    SearchResultTemplate == other.SearchResultTemplate ||
                //    SearchResultTemplate != null &&
                //    SearchResultTemplate.Equals(other.SearchResultTemplate)
                //) && 
                //(
                //    DetailTemplate == other.DetailTemplate ||
                //    DetailTemplate != null &&
                //    DetailTemplate.Equals(other.DetailTemplate)
                //) && 
                //(
                //    OrderList == other.OrderList ||
                //    OrderList != null &&
                //    OrderList.Equals(other.OrderList)
                //);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OrigUrl != null)
                    hashCode = hashCode * 59 + OrigUrl.GetHashCode();
                    if (SourcecodeUrl != null)
                    hashCode = hashCode * 59 + SourcecodeUrl.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (JsonSchema != null)
                    hashCode = hashCode * 59 + JsonSchema.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Betaversion != null)
                    hashCode = hashCode * 59 + Betaversion.GetHashCode();
                    if (AllowWriteAccess != null)
                    hashCode = hashCode * 59 + AllowWriteAccess.GetHashCode();
                    if (Hidden != null)
                    hashCode = hashCode * 59 + Hidden.GetHashCode();
                    //if (SearchResultTemplate != null)
                    //hashCode = hashCode * 59 + SearchResultTemplate.GetHashCode();
                    //if (DetailTemplate != null)
                    //hashCode = hashCode * 59 + DetailTemplate.GetHashCode();
                    //if (OrderList != null)
                    //hashCode = hashCode * 59 + OrderList.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DatasetDefinice left, DatasetDefinice right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DatasetDefinice left, DatasetDefinice right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

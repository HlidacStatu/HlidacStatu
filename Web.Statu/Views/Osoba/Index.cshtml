@model HlidacStatu.Lib.Data.Osoba

@using Nest;
@using HlidacStatu.Util;
@using HlidacStatu.Lib;
@using HlidacStatu.Lib.Render;
@using HlidacStatu.Web.Framework;
@using System.Collections.Generic;
@using System.Linq;
@using Devmasters.Enums;

@{
    Layout = null;

    Devmasters.DT.StopWatchLaps laps = new Devmasters.DT.StopWatchLaps();

    var aktualnost = HlidacStatu.Lib.Data.Relation.AktualnostType.Nedavny;

    var intv = laps.AddAndStartLap("StatistikaRegistruSmluv");
    var statistics = Model.StatistikaRegistrSmluv(aktualnost);

    var seasonStat = statistics.SoukromeFirmySummary().CurrentSeasonStatistics();
    var currentSeasonYear = statistics.SoukromeFirmySummary().CurrentSeasonYear();
    var zmenaObjemuSmluv = statistics.SoukromeFirmySummary().ChangeBetweenYears(currentSeasonYear - 1, currentSeasonYear, s => s.CelkovaHodnotaSmluv);

    var pocetSoukrFiremVztah = statistics.SoukromeFirmy.Count + statistics.StatniFirmy.Count;


    intv.Stop();



}



@* První sloupec *@
<div class="col-sm-7 col-sm-pull-5 col-xs-12 col-xs-pull-0">
    @{
        intv = laps.AddAndStartLap("RegistrSmluv");
    }
    @{
        int[] types = {
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.VolenaFunkce,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.PolitickaPracovni,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.Politicka,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.VerejnaSpravaJine,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.VerejnaSpravaPracovni,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.Osobni,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.Jine
                    };

        var listingNum = 3;
        var funkceOsobaNum = Model.Events(m => types.Contains(m.Type)).Count();
        var funkceOsoba = Model.Description(true,
               m => types.Contains(m.Type),
               (funkceOsobaNum <= listingNum + 1 ? listingNum + 1 : listingNum),
               "<ul>{0}</ul>", "<li>{0}</li>", "");
    }
    @if (funkceOsobaNum > 0)
    {
        <div>
            <h4>
                Funkce
            </h4>
            <p class="text-muted sub-header-info">
                Přehled politických a veřejných funkcí
            </p>
            <p>
                @Html.Raw(funkceOsoba)
            </p>
            @if (funkceOsobaNum > listingNum + 1)
            {
                <a href="Funkce/@Model.NameId" class="moreinfolink text-uppercase">
                    <strong>
                        Zobrazit @Devmasters.Lang.Plural.Get(funkceOsobaNum, "všechny funkce", "všechny funnkce", "všech {0} funkcí") osoby
                    </strong>
                </a>
            }
        </div>
        <hr />
    }
    @{
        var sponzorOsobaNum = Model.Sponzoring().Count();
        var sponzorOsoba = Model.SponzoringToHtml(
               (sponzorOsobaNum <= listingNum + 1 ? listingNum + 1 : listingNum),
               "<ul>{0}</ul>", "<li>{0}</li>", "");

    }
    @if (sponzorOsobaNum > 0)
    {
        <div>
            <h4>
                Sponzoring politických stran
            </h4>
            <p class="text-muted sub-header-info">
                Přehled finančních a nefinančních podpor politickým stranám. Podpory větší než 5000 Kč zobrazujeme po dobu 10 let, menší podpory po dobu 5 let.
            </p>
            <p>
                @Model.FullName() přímo či nepřímo @(Model.Muz() ? "podpořil" : "podpořila") politické strany celkem
                <b>@Devmasters.Lang.Plural.Get(sponzorOsobaNum,"jedním darem","{0} dary","{0} dary")</b>:
                @Html.Raw(sponzorOsoba)
            </p>
            @if (sponzorOsobaNum > listingNum + 1)
            {
                <a href="sponzoring/@Model.NameId" class="moreinfolink text-uppercase">
                    <strong>
                        Zobrazit @Devmasters.Lang.Plural.Get(sponzorOsobaNum,"dary","všechny {0} dary","všech {0} darů") politickým stranám
                    </strong>
                </a>
            }

        </div>
        <hr />
    }
    @if (statistics.SoukromeFirmySummary().Summary().PocetSmluv + statistics.NeziskovkySummary().Summary().PocetSmluv > 0)
    {
        <div>
            <h4>
                Registr smluv
            </h4>
            <p class="text-muted sub-header-info">
                Detailní informace o smlouvách uzavřených firmami, ve kterých se angažuje či angažoval @Model.FullName().
            </p>
            <p>
                @Html.Raw(Model.InfoFacts().Where(m => m.Level == HlidacStatu.Util.InfoFact.ImportanceLevel.Stat).FirstOrDefault()?.Render(true) ?? Model.InfoFacts().First().Render(true))
            </p>
            <a href="RegistrSmluv/@Model.NameId" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti</strong></a>
        </div>
        <hr />
    }
    @if (statistics.SoukromeFirmy.Count > 0)
    {
        <div>
            <h4>
                Angažovanost v soukromých firmách
            </h4>
            <p class="text-muted sub-header-info">
                Firmy, které tato osoba přímo či prostřednictvím jiných společností vlastnila či spoluvlastnila
                nebo byla ve statutárních orgánech, a to <b>@(aktualnost.ToNiceDisplayName().ToLower())</b>.
            </p>
            <p>
                @Model.FullName() se angažuje v @Devmasters.Lang.Plural.Get(statistics.SoukromeFirmy.Count, "jedné firmě", "{0} firmách", "{0} firmách")
                @if (statistics.NeziskovkyCount() > 0)
                {
                    <span>(z toho v @Devmasters.Lang.Plural.Get(statistics.NeziskovkyCount(), "jedné neziskovce", "{0} neziskovkách", "{0} neziskovkách"))</span>
                }
                :
                <ul>
                    @foreach (var stat in statistics.SoukromeFirmy
                        .OrderByDescending(o => o.Value.CurrentSeasonStatistics().CelkovaHodnotaSmluv)
                        .Take(statistics.SoukromeFirmy.Count <= listingNum + 1 ? listingNum + 1 : listingNum)
                        )
                    {
                        <li><a href="/subjekt/@stat.Key">@HlidacStatu.Lib.Data.Firmy.GetJmeno(stat.Key)</a> (@stat.Value.CurrentSeasonStatistics().ToNiceString(null, false) v @stat.Value.CurrentSeasonYear())</li>
                    }
                </ul>
            </p>
            <a href="vazby/@Model.NameId" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti</strong></a>
        </div>
        <hr />
    }
    @if (statistics.StatniFirmy.Count > 0)
    {
        <div>
            <h4>
                Angažovanost ve státních organizacích a firmách
            </h4>
            <p class="text-muted sub-header-info">
                Organizace a firmy vlastněné státem či samosprávou, které tato osoba přímo či prostřednictvím jiných společností spoluvlastnila
                nebo byla ve statutárních orgánech, a to <b>@(aktualnost.ToNiceDisplayName().ToLower())</b>.
            </p>
            <p>
                @Model.FullName() se angažuje v @Devmasters.Lang.Plural.Get(statistics.StatniFirmy.Count, "jedné organizaci", "{0} organizacích", "{0} organizacích"):
                <ul>
                    @foreach (var stat in statistics.StatniFirmy
        .OrderByDescending(o => o.Value.CurrentSeasonStatistics().CelkovaHodnotaSmluv)
        .Take(statistics.SoukromeFirmy.Count <= listingNum + 1 ? listingNum + 1 : listingNum)
        )
                    {
                        <li><a href="/subjekt/@stat.Key">@HlidacStatu.Lib.Data.Firmy.GetJmeno(stat.Key)</a> (@stat.Value.CurrentSeasonStatistics().ToNiceString(null, false) v @stat.Value.CurrentSeasonYear())</li>
                    }
                </ul>
            </p>
            <a href="vazby/@Model.NameId" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti</strong></a>
        </div>
        <hr />
    }


    @*dotace*@

    @{
        var dotaceAggsH = new Nest.AggregationContainerDescriptor<HlidacStatu.Lib.Data.Dotace.Dotace>()
                        .Terms("icos", s => s
                            .Field(f => f.Prijemce.Ico)
                            .Size(5000)
                            .Aggregations(a => a
                                .Sum("sum", ss => ss.Field(ff => ff.DotaceCelkem))
                            )
                        );
        var dotaceSearchH = new HlidacStatu.Lib.Data.Dotace.DotaceService().SimpleSearch("osobaid:" + Model.NameId, 1, 1,
            ((int)HlidacStatu.Lib.Searching.DotaceSearchResult.DotaceOrderResult.FastestForScroll).ToString(), false,
            dotaceAggsH, exactNumOfResults: true);

        decimal sumH = 0;
        var items = ((BucketAggregate)dotaceSearchH.ElasticResults.Aggregations["icos"]).Items;
        foreach (KeyedBucket<object> item in items)
        {
            sumH += (decimal)item.Sum("sum").Value;
        }
        var sdotaceHKc = " v celkové hodnotě <b>" + HlidacStatu.Util.RenderData.NicePrice(sumH) + "</b>.";
        string durlH = "/dotace/hledat?Q=osobaid%3A" + Model.NameId;
    }
    @if (dotaceSearchH.Total > 0)
    {
        <div>
            <h4>
                Informace o dotacích
            </h4>

            <p>
                <b>@Devmasters.Lang.Plural.Get(items.Count, "Jedna navázaná společnost", "{0} navázané společnosti", "{0} navázaných společností")</b>
                na osobu @Model.Jmeno @Model.Prijmeni
                @Devmasters.Lang.Plural.Get(items.Count,
                "dostala",
                "dostaly",
                "dostalo")

                @Html.Raw(Devmasters.Lang.Plural.Get((int)dotaceSearchH.Total,
                          " <a href='" + durlH + "'><b>jednu dotaci</b></a>" + sdotaceHKc,
                          " <a href='" + durlH + "'><b>{0} dotace</b></a>" + sdotaceHKc,
                          " <a href='" + durlH + "'><b>{0} dotací</b></a>" + sdotaceHKc))

            </p>
        </div>
        <a href="organizace/@Model.NameId" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti</strong></a>
        <hr />
    }



    @* ----- Insolvence -----*@
    @{
        var oinsDluznik = HlidacStatu.Lib.Data.Insolvence.Insolvence.SimpleSearch("dluznici.osobaId:" + Model.NameId, 1, 1, (int)HlidacStatu.Lib.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));
        var oinsVeritel = HlidacStatu.Lib.Data.Insolvence.Insolvence.SimpleSearch("veritele.osobaId:" + Model.NameId, 1, 1, (int)HlidacStatu.Lib.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));
        var oinsSpravce = HlidacStatu.Lib.Data.Insolvence.Insolvence.SimpleSearch("spravci.osobaId:" + Model.NameId, 1, 1, (int)HlidacStatu.Lib.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));

        Dictionary<string, long> oinsolv = new Dictionary<string, long>();
        oinsolv.Add("dluznici|dlužník|dlužníka|dlužníkem", oinsDluznik.Total);
        oinsolv.Add("veritele|věřitel|věřitele|veřitelem", oinsVeritel.Total);
        oinsolv.Add("spravci|insolvenční správce|insolvenčního správce|insolvenčním správcem", oinsSpravce.Total);

        var insDluznik = HlidacStatu.Lib.Data.Insolvence.Insolvence.SimpleSearch("osobaIddluznik:" + Model.NameId, 1, 1, (int)HlidacStatu.Lib.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));
        var insVeritel = HlidacStatu.Lib.Data.Insolvence.Insolvence.SimpleSearch("osobaIdveritel:" + Model.NameId, 1, 1, (int)HlidacStatu.Lib.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));
        var insSpravce = HlidacStatu.Lib.Data.Insolvence.Insolvence.SimpleSearch("osobaIdspravce:" + Model.NameId, 1, 1, (int)HlidacStatu.Lib.Searching.InsolvenceSearchResult.InsolvenceOrderResult.FastestForScroll, false, HlidacStatu.Web.Framework.InsolvenceLimitedView.IsLimited(this.User));

        Dictionary<string, long> insolv = new Dictionary<string, long>();
        insolv.Add("dluznik|dlužník|dlužníka|dlužníkem", insDluznik.Total);
        insolv.Add("veritel|věřitel|věřitele|veřitelem", insVeritel.Total);
        insolv.Add("spravce|insolvenční správce|insolvenčního správce|insolvenčním správcem", insSpravce.Total);

    }
    @if (oinsolv.Sum(m => m.Value) + insolv.Sum(m => m.Value) > 0)
    {
        <div>
            <h4>Insolvenční rejstřík</h4>
            <p class="text-muted sub-header-info">
                Informace o insolvenčních řízeních, kterých se @Model.FullName() nebo firmy, ve kterých se angažuje,
                účastní jako dlužník, věřitel či správce.
            </p>
            @if (oinsolv.Sum(m => m.Value) > 0)
            {
                <p>
                    @Model.FullName() se osobně
                    <ul>
                        @foreach (var kv in oinsolv.OrderByDescending(m => m.Value))
                        {
                            var text = kv.Key.Split('|');
                            string surl = WebUtil.GetSearchUrl("/insolvence/hledat", $"{text[0]}.osobaId:" + Model.NameId);

                            <li>
                                @Html.Raw(Devmasters.Lang.Plural.GetWithZero((int)kv.Value,
                               "<b>nevyskytuje</b> v insolvenčním rejstříku ",
                               " vyskytuje v <a href='" + surl + "'><b>jedné insolvenci</b></a>",
                               " vyskytuje v <a href='" + surl + "'><b>{0} insolvencích</b></a>",
                               " vyskytuje v <a href='" + surl + "'><b>{0} insolvencích</b></a>"))
                                jako @text[1].
                            </li>
                        }
                    </ul>
                </p>
            }
            @if (insolv.Sum(m => m.Value) > 0)
            {
                <p>
                    Společnosti, ve který se @Model.FullName() angažuje, se
                    <ul>
                        @foreach (var kv in insolv.OrderByDescending(m => m.Value))
                        {
                            var text = kv.Key.Split('|');
                            string surl = WebUtil.GetSearchUrl("/insolvence/hledat", $"osobaid{text[0]}:" + Model.NameId);

                            <li>
                                @Html.Raw(Devmasters.Lang.Plural.GetWithZero((int)kv.Value,
                               "<b>nevyskytují</b> v insolvenčním rejstříku ",
                               "vyskytují v <a href='" + surl + "'><b>jedné insolvenci</b></a>",
                               "vyskytují v <a href='" + surl + "'><b>{0} insolvencích</b></a>",
                               "vyskytují v <a href='" + surl + "'><b>{0} insolvencích</b></a>")) jako @text[1].
                        </li>
                    }
                    </ul>
                </p>
            }

        </div>
        <hr />

    }

    @* ----- Veřejné zakázky -----*@
    @{
        var resVZdodav = HlidacStatu.Lib.Data.VZ.VerejnaZakazka.Searching.SimpleSearch("osobaiddodavatel:" + Model.NameId, null, 1, 0, "1");
        var resVZzadav = HlidacStatu.Lib.Data.VZ.VerejnaZakazka.Searching.SimpleSearch("osobaidzadavatel:" + Model.NameId, null, 1, 0, "1");
        Dictionary<string, long> vzakaz = new Dictionary<string, long>();
        vzakaz.Add("dodavatel|dodavatel|dodavatele|dodavatelem", resVZdodav.Total);
        vzakaz.Add("zadavatel|zadavatel|zadavatele|zadavatelem", resVZzadav.Total);
    }
    @if (resVZdodav.Total + resVZzadav.Total > 0)
    {
        <div>
            <h4>Veřejné zakázky</h4>
            <p class="text-muted sub-header-info">
                Veřejné zakázky firem a organizací, ve kterých se angažuje @Model.FullName().
                Zakázky analyzujeme jak z věstníku veřejných zakázek, tak z profilů zadavatelů.
            </p>

            <p>
                Firmy navázané na @Model.FullName() jsme našli
                <ul>
                    @foreach (var kv in vzakaz.OrderByDescending(m => m.Value).Where(m => m.Value > 0))
                    {
                        var text = kv.Key.Split('|');
                        string surl = WebUtil.GetSearchUrl("/verejnezakazky/hledat", $"osobaid{text[0]}:" + Model.NameId);
                        if (kv.Value > 0)
                        {
                            <li>
                                @Html.Raw(Devmasters.Lang.Plural.Get(kv.Value,
                            $"v <a href='{surl}'><b>jedné</b> veřejné zakázce</a> jako {text[2]}",
                            $"v <a href='{surl}'><b>{{0}}</b> veřejných zakázkách</a> jako {text[2]}",
                            $"v <a href='{surl}'><b>{{0}}</b> veřejných zakázkach</a> jako {text[2]}")).
                            </li>
                        }
                    }
                </ul>
            </p>


        </div>
        <hr />
    }

    @{

        var dsQuery = $"( OsobaId:{Model.NameId} ) ";
        var dsSearch = HlidacStatu.Lib.Data.Search.DatasetMultiResult.GeneralSearch(dsQuery, pageSize: 5);

    }
    @if (dsSearch.IsValid && dsSearch.Total > 0)
    {
        <div>
            <h4>@(Model.FullName() ) v dalších databázích</h4>
            <p class="text-muted sub-header-info">
                Na hlídači máme kromě hlavních databází @(HlidacStatu.Lib.Data.External.DataSets.DataSetDB.AllDataSets.Get()?.Count().ToString() ?? "") dalších menších databází.
                Zde vám podrobně vypíšeme, co jsme v nich o @Model.FullName() našli.
            </p>
            <p>
                @(HlidacStatu.Util.RenderData.Vysledky.PocetVysledku(dsSearch.Total))
                @Html.Raw(Devmasters.Lang.Plural.Get(dsSearch.Results.Count(m => m.Total > 0), "v <b>jedné</b> databázi", "ve <b>{0} databázích</b>", "v <b>{0} databázích</b>")).
                @if (dsSearch.Results.Count(m => m.Total > 0) > 1)
                {
                    <text>
                        Nejvíce v
                        <ul>
                            @Html.Raw(string.Join("", dsSearch.Results.Where(m => m.Total > 0).OrderByDescending(o => o.Total).Take(4).Select(m => $"<li><a href='{m}'>{m.DataSet.Registration().name}</a> ({HlidacStatu.Util.RenderData.NiceNumber(m.Total)})</li>")))

                        </ul>
                    </text>
                }
            </p>


        </div>


        <a href="DalsiDatabaze/@Model.NameId" class="moreinfolink text-uppercase"><strong>Zobrazit výsledky z dalších databází</strong></a>

        <hr />
    }


    <!--
        @Html.Raw(string.Join("\n",laps.Laps.Select(m=>$"{m.Name} : {m.ExactElapsedMs:# ##0.00}ms")))
        -->

@model HlidacStatu.Lib.Data.Osoba

@using Nest;
@using HlidacStatu.Lib;
@using HlidacStatu.Lib.Render;
@using HlidacStatu.Web.Framework;
@using System.Collections.Generic;
@using System.Linq;
@using Devmasters.Enums;

@{
    Layout = null;

    Devmasters.DT.StopWatchLaps laps = new Devmasters.DT.StopWatchLaps();

    var aktualnost = HlidacStatu.Lib.Data.Relation.AktualnostType.Nedavny;

    var intv = laps.AddAndStartLap("StatistikaRegistruSmluv");
    var statistics = Model.StatistikaRegistrSmluv(aktualnost);

    var seasonStat = statistics.SoukromeFirmySummary().CurrentSeasonStatistics();
    var currentSeasonYear = statistics.SoukromeFirmySummary().CurrentSeasonYear();
    var zmenaObjemuSmluv = statistics.SoukromeFirmySummary().ChangeBetweenYears(currentSeasonYear - 1, currentSeasonYear, s => s.CelkovaHodnotaSmluv);

    var pocetSoukrFiremVztah = statistics.SoukromeFirmy.Count + statistics.StatniFirmy.Count;


    intv.Stop();



}



@* První sloupec *@
<div class="col-sm-7 col-sm-pull-5 col-xs-12 col-xs-pull-0">
    @{
        intv = laps.AddAndStartLap("RegistrSmluv");
    }
    @{
        int[] types = {
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.VolenaFunkce,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.PolitickaPracovni,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.Politicka,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.VerejnaSpravaJine,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.VerejnaSpravaPracovni,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.Osobni,
                        (int)HlidacStatu.Lib.Data.OsobaEvent.Types.Jine
                    };

        var listingNum = 5;
        var funkceOsobaNum = Model.Events(m => types.Contains(m.Type)).Count();
        var funkceOsoba = Model.Description(true,
               m => types.Contains(m.Type),
               (funkceOsobaNum <= listingNum + 1 ? listingNum + 1 : listingNum),
               "<ul>{0}</ul>", "<li>{0}</li>", "");
    }
    @if (funkceOsobaNum > 0)
    {
        <div>
            <h4>
                Funkce
            </h4>
            <p class="text-muted sub-header-info">
                Přehled politických a veřejných funkcí
            </p>
            <p>
                @Html.Raw(funkceOsoba)
            </p>
            @if (funkceOsobaNum > listingNum + 1)
            {
                <a href="Funkce/@Model.NameId" class="moreinfolink text-uppercase">
                    <strong>
                        Zobrazit @Devmasters.Lang.Plural.Get(funkceOsobaNum, "všechny funkce", "všechny funnkce", "všech {0} funkcí") osoby
                    </strong>
                </a>
            }
        </div>
        <hr />
    }
    @{
        var sponzorOsobaNum = Model.Sponzoring().Count();
        var sponzorOsoba = Model.SponzoringToHtml(
               (funkceOsobaNum <= listingNum + 1 ? listingNum + 1 : listingNum),
               "<ul>{0}</ul>", "<li>{0}</li>", "");

    }
    @if (sponzorOsobaNum > 0)
    {
        <div>
            <h4>
                Sponzoring politických stran
            </h4>
            <p class="text-muted sub-header-info">
                Přehled finančních a nefinančních podpor politickým stranám. Podpory větší než 5000 Kč zobrazujeme po dobu 10 let, menší podpory po dobu 5 let.
            </p>
            <p>
                @Html.Raw(sponzorOsoba)
            </p>
            @if (sponzorOsobaNum > listingNum + 1)
            {
                <a href="Funkce/@Model.NameId" class="moreinfolink text-uppercase">
                    <strong>
                        Zobrazit @Devmasters.Lang.Plural.Get(funkceOsobaNum, "všechny funkce", "všechny funnkce", "všech {0} funkcí") osoby
                    </strong>
                </a>
            }

        </div>
        <hr />
    }

    @if (statistics.StatniFirmy.Count > 0)
    {
    <div>
        <h4>
            Angažovanost v soukromých firmách
        </h4>
        <p class="text-muted sub-header-info">
            Firmy, které tato osoba přímo či prostřednictvím jiných společností vlastnila či spoluvlastnila
            nebo byla ve statutárních orgánech, a to @(aktualnost.ToNiceDisplayName().ToLower()).
        </p>
        <p>

        </p>
        <a href="/osoba/RegistrSmluv/@Model.NameId" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti</strong></a>
    </div>
    <hr />
    }

    @if (statistics.SoukromeFirmySummary().Summary().PocetSmluv + statistics.NeziskovkySummary().Summary().PocetSmluv > 0)
    {
        <div>
            <h4>
                Registr smluv
            </h4>
            <p class="text-muted sub-header-info">
                Detailní informace o smlouvách uzavřených firmami, ve kterých se angažuje či angažoval @Model.FullName().
            </p>
            <p>
                @Html.Raw(Model.InfoFacts().Where(m => m.Level == HlidacStatu.Util.InfoFact.ImportanceLevel.Stat).FirstOrDefault()?.Render(true) ?? Model.InfoFacts().First().Render(true))
            </p>
            <a href="/osoba/RegistrSmluv/@Model.NameId" class="moreinfolink text-uppercase"><strong>Zobrazit podrobnosti</strong></a>
        </div>
        <hr />
    }

    @*dotace*@

    @{
        var dotaceAggsH = new Nest.AggregationContainerDescriptor<HlidacStatu.Lib.Data.Dotace.Dotace>()
                        .Terms("icos", s => s
                            .Field(f => f.Prijemce.Ico)
                            .Size(5000)
                            .Aggregations(a => a
                                .Sum("sum", ss => ss.Field(ff => ff.DotaceCelkem))
                            )
                        );
        var dotaceSearchH = new HlidacStatu.Lib.Data.Dotace.DotaceService().SimpleSearch("osobaid:" + Model.NameId, 1, 1,
            ((int)HlidacStatu.Lib.Searching.DotaceSearchResult.DotaceOrderResult.FastestForScroll).ToString(), false,
            dotaceAggsH, exactNumOfResults: true);

        decimal sumH = 0;
        var items = ((BucketAggregate)dotaceSearchH.ElasticResults.Aggregations["icos"]).Items;
        foreach (KeyedBucket<object> item in items)
        {
            sumH += (decimal)item.Sum("sum").Value;
        }
        var sdotaceHKc = " v celkové hodnotě <b>" + HlidacStatu.Util.RenderData.NicePrice(sumH) + "</b>.";
        string durlH = "/dotace/hledat?Q=osobaid%3A" + Model.NameId;
    }
    @if (dotaceSearchH.Total > 0)
    {
        <div>
            <h4>
                Informace o dotacích
            </h4>

            <p>
                <b>@Devmasters.Lang.Plural.Get(items.Count, "Jedna navázaná společnost", "{0} navázané společnosti", "{0} navázaných společností")</b>
                na osobu @Model.Jmeno @Model.Prijmeni
                @Devmasters.Lang.Plural.Get(items.Count,
                       "dostala",
                       "dostaly",
                       "dostalo")

                @Html.Raw(Devmasters.Lang.Plural.Get((int)dotaceSearchH.Total,
                                 " <a href='" + durlH + "'><b>jednu dotaci</b></a>" + sdotaceHKc,
                                 " <a href='" + durlH + "'><b>{0} dotace</b></a>" + sdotaceHKc,
                                 " <a href='" + durlH + "'><b>{0} dotací</b></a>" + sdotaceHKc))

            </p>
        </div>

    }



</div>

<!--
    @Html.Raw(string.Join("\n",laps.Laps.Select(m=>$"{m.Name} : {m.ExactElapsedMs:# ##0.00}ms")))
    -->

@model NemocniceData[]

@using System
@using System.Collections.Generic
@using System.Linq
@using HlidacStatu.Web.Models

@{ 
    Layout = null;

    NemocniceData[] dny = Model;

    NemocniceData firstKraje = dny.First();
    NemocniceData lastKraje = dny.Last();
    NemocniceData diffKraje = NemocniceData.Diff(firstKraje,lastKraje);

    NemocniceData lastCr = dny.Last().CelaCR();
    NemocniceData firstCr = dny.First().CelaCR();

    string[] prefered = new string[] { "PHA", "STC", "JHM", "MSK" };
    List<string> krajeSort = prefered
    .Union(lastKraje.regions
        .Select(m => m.region.ToUpper())
        .Where(m=>prefered.Contains(m)==false)
        .OrderBy(m=>m)
        )
    .ToList();

}


<div class="jumbotron">
    <h2 style="padding-bottom:40px;" class="text-center">Volné kapacity intenzivní péče v nemocnicích
    <small>aktualizováno @(lastKraje.lastUpdated.ToString("dd.MM.yyyy HH:mm"))</small>
    </h2>
    <p>
        Data ÚZIS, která Ministerstvo zdravotnictví tajila nejen před veřejností, ale po zveřejnění dat naším serverem a následným veřejným tlakem od 1.10.2020 zveřejňuje 1x denně.
    </p>
</div>

        <div class="bs-callout bs-callout-primary small">
    <h4>Základní pojmy</h4>
    <p>
        <dl>
        <dt>COVID lůžka</dt>
        <dd>Lůžka speciálně vyhrazena pro infekční pacienty. Kromě obvykle fyzické izolace ve vyhrazeném prostoru je zde 
            povinná vyšší ochrana lékařů a sester (ochranný oblek), obvykle kratší směny, speciální režim zaměstnanců.
        </dd>
        <dt>neCOVID lůžka</dt>
        <dd>Obvyklá JIP/ARO/lůžka s kyslíkem, bez jinak obvyklého speciálního režimu. 
            Podle možností nemocnice je možné některá z těchto lůžek změnit na COVID lůžka.           
            To má samozřejmě vliv třeba na léčbu těch, které přivezou od dopravní nehody            
        </dd>
        
        </dl>
    </p>
</div>

<p>
    Rychlá navigace:
    <ul>
        
        <li><a href="#CR">Celá ČR</a></li>
        @foreach (var h in lastKraje.regions.OrderBy(o => krajeSort.IndexOf(o.region)).ToArray())
        {
            <li><a href="#@h.region">@h.regionFull()</a></li>
        }
        <hr/>
        <li><a href="#nemocnice">Kapacita jednotlivých nemocnic</a></li>
        <li><a href="#opendata">Open data</a></li>
    </ul>
</p>

<hr/>
@{     
    NemocniceData diffCR = NemocniceData.Diff(firstCr, lastCr);
        @RenderH(lastCr.regions.First(),diffCR.regions.First(), firstCr, dny.Select(m=>m.CelaCR()))
}
<h2>Souhrn pro jednotlivé kraje</h2>
@foreach (var h in lastKraje.regions.OrderBy(o => krajeSort.IndexOf(o.region)).ToArray())
{
    NemocniceData.Region diffH = diffKraje.regions.First(m => m.region == h.region);
    @RenderH(h,diffH, firstKraje, dny.Select(m=>m.PoKrajich()))
}


<hr />


@{ 
var client = NemocniceData.Client();
Data lastNem = client.Search<Data>(s => s
    .Size(1)
    .Sort(o => o.Descending(f => f.lastUpdated))
    .Query(q => q.MatchAll())
)
.Hits
.Select(m => m.Source)
.First();
    var diffNem = client.Get<Data>("20200918-1440").Source;

}
<h2 id="nemocnice">Seznam jednotlivých nemocnic <small>Stav k @(lastNem.lastUpdated.ToString("dd. MM. HH")):00</small></h2>
<script>
var tbl_nem_o;
$(document).ready(function () {
tbl_nem_o = $('#nem_o').DataTable({
                 'language': {
                    'url': '//cdn.datatables.net/plug-ins/1.10.19/i18n/Czech.json'
                },
                'order': [],
                'lengthMenu': [[25, 50, 100, -1], [25, 50, 100, "Všechny"]],
                'info': false,
                });
});
</script>

<p class="text-warning">Data o nemocnicích jsou aktualizována jindy, než souhrny krajů. V součtech proto může dojít k malým nepřesnostem.</p>
<p style="font-weight:bold">Kliknutím na sloupec můžete třídit podle abecedy nebo počtu volných COVID míst/přístrojů.</p>
<table id="nem_o" class="table-sorted table table-bordered table-striped">
    <thead>
        <tr>
            <td>Nemocnice</td>
            <td>Region</td>
            <td>Údaje nemocnice zaslala naposledy</td>
            <td>Lůžka ARO+JIP dosp.<br />(COVID / neCOVID)</td>
            <td>Lůžka s kyslíkem<br />(COVID / neCOVID)</td>
            <td>Přístroje ECMO</td>
            <td>Přístroje UPV</td>
            <td>Přístroje CRRT</td>
            <td>Lékaři</td>
            <td>Sestry</td>
            <td>Ventilátory sál</td>
            <td>Ventilátory přenosné</td>
        </tr>
    </thead>
    <tbody>
        @foreach (var h in lastNem.hospitals)
        {
            Data.Hospital dh = diffNem.hospitals.FirstOrDefault(m => m.nemocniceID == h.nemocniceID);
            if (dh == null)
            {
                dh = new Data.Hospital();
            }

            <tr>
                <td>@h.name<br />(změna od @diffNem.lastUpdated.ToString("dd.MM.") do @h.lastModified.ToString("dd.MM."))</td>
                <td>@h.regionFull()</td>
                <td data-order="@h.lastModified.Ticks">@(h.lastModified.ToString("dd.MM."))<br/>@(h.lastModified.ToString("HH:ss"))</td>
                <td style='white-space: nowrap;font-weight:bold;' data-order="@h.AROJIP_luzka_covid">@h.AROJIP_luzka_covid / @h.AROJIP_luzka_necovid z @h.AROJIP_luzka_celkem
                <br/>
                <span style="font-weight:normal;color:@TColor(dh.AROJIP_luzka_covid)">@(dh.AROJIP_luzka_covid.ToString("+#;-#;0"))</span> / <span style="font-weight:normal;color:@TColor(dh.AROJIP_luzka_necovid)">@(dh.AROJIP_luzka_necovid.ToString("+#;-#;0"))</span> 
                </td>
                <td style='white-space: nowrap;font-weight:bold;'  data-order="@h.Standard_luzka_s_kyslikem_covid">@h.Standard_luzka_s_kyslikem_covid / @h.Standard_luzka_s_kyslikem_necovid z @h.Standard_luzka_s_kyslikem_celkem
                <br/>
                <span style="font-weight:normal;color:@TColor(dh.Standard_luzka_s_kyslikem_covid)">@(dh.Standard_luzka_s_kyslikem_covid.ToString("+#;-#;0"))</span> / <span style="font-weight:normal;color:@TColor(dh.Standard_luzka_s_kyslikem_necovid)">@(dh.Standard_luzka_s_kyslikem_necovid.ToString("+#;-#;0"))</span> 
                </td>
                <td style='white-space: nowrap;font-weight:bold;'  data-order="@h.ECMO_volna">@h.ECMO_volna z @h.ECMO_celkem
                <br/><span style="font-weight:normal;color:@TColor(dh.ECMO_volna)">@(dh.ECMO_volna.ToString("+#;-#;0"))</span>
                </td>
                <td style='white-space: nowrap;font-weight:bold;'  data-order="@h.UPV_volna">@h.UPV_volna z @h.UPV_celkem
                <br/><span style="font-weight:normal;color:@TColor(dh.UPV_volna)">@(dh.UPV_volna.ToString("+#;-#;0"))</span>
                </td>
                <td style='white-space: nowrap;font-weight:bold;'  data-order="@h.CRRT_volna">@h.CRRT_volna z @h.CRRT_celkem
                <br/><span style="font-weight:normal;color:@TColor(dh.CRRT_volna)">@(dh.CRRT_volna.ToString("+#;-#;0"))</span>
                </td>
                <td style='white-space: nowrap;font-weight:bold;'  data-order="@h.Lekari_AROJIP_celkem">@h.Lekari_AROJIP_celkem
                <br/><span style="font-weight:normal;color:@TColor(dh.Lekari_AROJIP_celkem)">@(dh.Lekari_AROJIP_celkem.ToString("+#;-#;0"))</span>
                </td>
                <td style='white-space: nowrap;font-weight:bold;'  data-order="@h.Sestry_AROJIP_celkem">@h.Sestry_AROJIP_celkem
                <br/><span style="font-weight:normal;color:@TColor(dh.Sestry_AROJIP_celkem)">@(dh.Sestry_AROJIP_celkem.ToString("+#;-#;0"))</span>
                </td>
                <td style='white-space: nowrap;font-weight:bold;'  data-order="@(h.Ventilatory_operacnisal_celkem)">@(h.Ventilatory_operacnisal_celkem)
                <br/><span style="font-weight:normal;color:@TColor(dh.Ventilatory_operacnisal_celkem)">@(dh.Ventilatory_operacnisal_celkem.ToString("+#;-#;0"))</span>
                </td>
                <td style='white-space: nowrap;font-weight:bold;'  data-order="@(h.Ventilatory_prenosne_celkem)">@(h.Ventilatory_prenosne_celkem)
                <br/><span style="font-weight:normal;color:@TColor(dh.Ventilatory_prenosne_celkem)">@(dh.Ventilatory_prenosne_celkem.ToString("+#;-#;0"))</span>
                </td>

            </tr>
        }
    </tbody>
</table>

<hr />

<h2 id="opendata">Open Data</h2>
<ul>
    <li><a href="/data/index/kapacity-nemocnic" target="_blank">Data se statistikami po krajich</a></li>
    <li><a href="/KapacitaNemocnicData/last" target="_blank">Aktuální stav kapacit jednotlivých nemocnic</a></li>

</ul>


@functions { public string TColor(int val)
            {
                if (val < 0)
                {
                    return "#A00000";
                }
                else if (val > 0)
                {
                    return "#00A000";
                }
                else
                {
                    return "#000000";
                }
            }

}

@helper RenderH(NemocniceData.Region h, NemocniceData.Region diffH, NemocniceData first, IEnumerable<NemocniceData> timedata)
{
var chartdata = timedata.Select(m => new  
{ 
    date = m.lastUpdated,data = m.regions.First(hh=>hh.region == h.region) 
});


<h2 id="@h.region">@h.regionFull()</h2>


<div class="row">
    <div class="col-xs-12 col-sm-6 singlebox">
        <h4>Lůžka (ARO+JIP dospělí)</h4>
        <p>
            Celkem @h.AROJIP_luzka_celkem, volných @(h.AROJIP_luzka_covid+h.AROJIP_luzka_necovid) (@HlidacStatu.Util.RenderData.NicePercent(h.AROJIP_perc()))
            <br />
            Volná lůžka: COVID <span style="font-size:125%;font-weight:bold">@h.AROJIP_luzka_covid</span> / neCOVID <span style="font-size:125%">@h.AROJIP_luzka_necovid</span>
            <br />
            Změna volných od @first.lastUpdated.ToString("dd.MM."): <span style="font-weight:normal;color:@TColor(diffH.AROJIP_luzka_covid)">@(diffH.AROJIP_luzka_covid.ToString("+#;-#;0"))</span> / <span style="font-weight:normal;color:@TColor(diffH.AROJIP_luzka_necovid)">@(diffH.AROJIP_luzka_necovid.ToString("+#;-#;0"))</span>
        </p>
        <p>
            @UtilChart.SimpleLineChart(new (string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] {
                    (name:"ARO+JIP volná neCOVID lůžka", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.AROJIP_luzka_necovid } )
                    ),
                    (name:"ARO+JIP volná COVID lůžka", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.AROJIP_luzka_covid } )
                    )
                },
                "","počet",200, minY:0 )
        </p>
    </div>
    <div class="clearfix hidden-md hidden-lg"></div>

    <div class="col-xs-12 col-sm-6 singlebox">
        <h4>Lůžka (standardní s kyslíkem)</h4>
        <p>
            Celkem @h.Standard_luzka_s_kyslikem_celkem, volných @(h.Standard_luzka_s_kyslikem_covid+h.Standard_luzka_s_kyslikem_necovid) (@HlidacStatu.Util.RenderData.NicePercent(h.Standard_luzka_s_kyslikem_perc()))
            <br />
            Volná lůžka: COVID <span style="font-size:125%;font-weight:bold">@h.Standard_luzka_s_kyslikem_covid</span> / neCOVID <span style="font-size:125%">@h.Standard_luzka_s_kyslikem_necovid</span>
            <br />
            Změna volných od @first.lastUpdated.ToString("dd.MM."): <span style="font-weight:normal;color:@TColor(diffH.Standard_luzka_s_kyslikem_covid)">@(diffH.Standard_luzka_s_kyslikem_covid.ToString("+#;-#;0"))</span> / <span style="font-weight:normal;color:@TColor(diffH.Standard_luzka_s_kyslikem_necovid)">@(diffH.Standard_luzka_s_kyslikem_necovid.ToString("+#;-#;0"))</span>
        </p>
        <p>
            @UtilChart.SimpleLineChart(new (string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] {
                    (name:"volná neCOVID lůžka s kyslíkem", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.Standard_luzka_s_kyslikem_necovid} )
                    ),
                    (name:"volná COVID lůžka s kyslíkem", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.Standard_luzka_s_kyslikem_covid} )
                    )
                },
                "","počet",200, minY:0 )
        </p>
    </div>
    <div class="clearfix "></div>

    <div class="col-xs-12 col-sm-6 singlebox">
        <h4>Přístroje ECMO <small>podpora nejvaznejsich pripadu, plicni rizeni</small></h4>

        <p>
            Celkem @h.ECMO_celkem, volných: @h.ECMO_volna (@HlidacStatu.Util.RenderData.NicePercent(h.ECMO_perc()))
            <br />
            Změna volných od @first.lastUpdated.ToString("dd.MM."): <span style="font-weight:normal;color:@TColor(diffH.ECMO_volna)">@(diffH.ECMO_volna.ToString("+#;-#;0"))</span>
        </p>
        <p>
            @UtilChart.SimpleLineChart(new (string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] {
                    (name:"Přístroje ECMO celkem", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.ECMO_celkem } )
                    ),
                    (name:"Přístroje ECMO volné", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.ECMO_volna } )
                    )
                },
                "","počet",200, minY:0 )
        </p>
    </div>
    <div class="clearfix hidden-md hidden-lg"></div>

    <div class="col-xs-12 col-sm-6 singlebox">
        <h4>Přístroje UPV <small>Umělá plicni ventilace</small></h4>
        <p>
            Celkem @h.UPV_celkem, volných: @h.UPV_volna (@HlidacStatu.Util.RenderData.NicePercent(h.UPV_perc()))
            <br />
            Změna volných od @first.lastUpdated.ToString("dd.MM."): <span style="font-weight:normal;color:@TColor(diffH.UPV_volna)">@(diffH.UPV_volna.ToString("+#;-#;0"))</span>
        </p>
        <p>
            @UtilChart.SimpleLineChart(new (string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] {
                    (name:"Přístroje UPV celkem", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.UPV_celkem } )
                    ),
                    (name:"Přístroje UPV volné", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.UPV_volna } )
                    )
                },
                "","počet",200, minY:0 )
        </p>

    </div>

        <div class="clearfix"></div>

    <div class="col-xs-12 col-sm-6 singlebox">
        <h4>Přístroje CRRT <small>kontinuální dialýza</small></h4>
        <p>
            Celkem @h.CRRT_celkem, volných: @h.CRRT_volna (@HlidacStatu.Util.RenderData.NicePercent(h.CRRT_perc()))
            <br />
            Změna volných od @first.lastUpdated.ToString("dd.MM."): <span style="font-weight:normal;color:@TColor(diffH.CRRT_volna)">@(diffH.CRRT_volna.ToString("+#;-#;0"))</span>
        </p>
        <p>
            @UtilChart.SimpleLineChart(new (string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] {
                    (name:"Přístroje CRRT celkem", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.CRRT_celkem } )
                    ),
                    (name:"Přístroje CRRT volné", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.CRRT_volna } )
                    )
                },
                "","počet",200, minY:0 )
        </p>
    </div>
    
    <div class="col-xs-12 col-sm-6 singlebox">
        <h4>Lékaři <small>ARO+JIP dospělí</small></h4>
        <p>
            Celkem @h.Lekari_AROJIP_celkem
            <br />
            Změna počtu od @first.lastUpdated.ToString("dd.MM."): <span style="font-weight:normal;color:@TColor(diffH.Lekari_AROJIP_celkem)">@(diffH.Lekari_AROJIP_celkem.ToString("+#;-#;0"))</span>
        </p>
        <p>
            @UtilChart.SimpleLineChart(new (string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] {
                    (name:"Lékaři ARO+JIP celkem", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.Lekari_AROJIP_celkem} )
                    ),
                    (name:"Lékaři ARO+JIP dostupní", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.Lekari_AROJIP_dostupni} )
                    )
                },
                "","počet",200, minY:0 )
        </p>
    </div>
    <div class="clearfix "></div>

    <div class="col-xs-12 col-sm-6 singlebox">
        <h4>Sestry <small>ARO+JIP dospělí</small></h4>
        <p>
            Celkem @h.Sestry_AROJIP_celkem
            <br />
            Změna počtu od @first.lastUpdated.ToString("dd.MM."): <span style="font-weight:normal;color:@TColor(diffH.Sestry_AROJIP_celkem)">@(diffH.Sestry_AROJIP_celkem.ToString("+#;-#;0"))</span>
       </p>
        <p>
            @UtilChart.SimpleLineChart(new (string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] {
                    (name:"Sestry ARO+JIP celkem", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.Sestry_AROJIP_celkem} )
                    ),
                    (name:"Sestry ARO+JIP dostupné", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.Sestry_AROJIP_dostupni} )
                    )
                },
                "","počet",200, minY:0 )
        </p>
    </div>
                        <div class="clearfix hidden-md hidden-lg"></div>

    <div class="col-xs-12 col-sm-6 singlebox" >
        <h4>Dostupné ventilátory <small>přenosné + operační sál</small></h4>
        <p>
            Celkem @(h.Ventilatory_prenosne_celkem+h.Ventilatory_operacnisal_celkem)
            <br />
            Změna počtu od @first.lastUpdated.ToString("dd.MM."): <span style="font-weight:normal;color:@TColor((diffH.Ventilatory_prenosne_celkem+diffH.Ventilatory_operacnisal_celkem))">@((h.Ventilatory_prenosne_celkem+h.Ventilatory_operacnisal_celkem).ToString("+#;-#;0"))</span>
              <br/><span class="text-info">pozor na měřítko, osa Y nezačíná na nule</span>
      </p>
        <p>
            @UtilChart.SimpleLineChart(new (string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] {
                    (name:"Dostupné ventilátory přenosné+oper.sál", 
                        values:chartdata.Select(m=>new HlidacStatu.Lib.Render.ReportDataTimeValue(){ Date = m.date, Value = m.data.Ventilatory_prenosne_celkem+m.data.Ventilatory_operacnisal_celkem } )
                    )
                },
                "","počet",200, minY:0 )
        </p>
    </div>

    <div class="clearfix"></div>

</div>
<hr />
   
}

@functions {

    public class Data
    {
        public Data() { }

        [Nest.Date]
        public DateTime lastUpdated { get; set; }
        public Hospital[] hospitals { get; set; }

        public class Hospital
        {
            
            public string regionFull()
            {
                switch (this.region)
                {
                    case "HKK": return "Královéhradecký kraj";
                    case "JHC": return "Jihočeský kraj";
                    case "JHM": return "Jihomoravský kraj";
                    case "KVK": return "Karlovarský kraj";
                    case "LBK": return "Liberecký kraj";
                    case "MSK": return "Moravskoslezský kraj";
                    case "OLK": return "Olomoucký kraj";
                    case "PAK": return "Pardubický kraj";
                    case "PHA": return "Praha";
                    case "PLK": return "Plzeňský kraj";
                    case "STC": return "Středočeský kraj";
                    case "ULK": return "Ústecký kraj";
                    case "VYS": return "Kraj Vysočina";
                    case "ZLK": return "Zlínský kraj";
                    case "CR": return "Česká republika";
                    default:
                        return "";

                }
            }
            public int nemocniceID { get; set; }
            public string name { get; set; }

            [Nest.Keyword]
            public string region { get; set; }
            [Nest.Date]
            public DateTime lastModified { get; set; }

            //ECMO plicni rizeni, podpora nejvaznejsich pripadu, dela i metabolicke veci
            public int ECMO_volna { get; set; }
            public int ECMO_celkem { get; set; }
            public decimal ECMO_perc() => (ECMO_celkem == 0 ? 0 : (decimal)ECMO_volna / (decimal)ECMO_celkem);

            //Uplna plicni ventilace
            public int UPV_volna { get; set; }
            public int UPV_celkem { get; set; }
            public decimal UPV_perc() => (UPV_celkem == 0 ? 0 : (decimal)UPV_volna / (decimal)UPV_celkem);

            //CRRT - kontinualni dialyza, tezke pripady, selhani ledvin
            public int CRRT_volna { get; set; }
            public int CRRT_celkem { get; set; }
            public decimal CRRT_perc() => (CRRT_celkem == 0 ? 0 : (decimal)CRRT_volna / (decimal)CRRT_celkem);

            //IHD - intermitetni dialyza, co nejede kontinualne
            public int IHD_volna { get; set; }
            public int IHD_celkem { get; set; }
            public decimal IHD_perc() => (IHD_volna == 0 ? 0 : (decimal)IHD_volna / (decimal)IHD_celkem);


            public int AROJIP_luzka_celkem { get; set; }
            public int AROJIP_luzka_covid { get; set; }
            public int AROJIP_luzka_necovid { get; set; }
            public decimal AROJIP_perc() => (AROJIP_luzka_celkem == 0 ? 0 : ((decimal)AROJIP_luzka_covid + (decimal)AROJIP_luzka_necovid) / (decimal)AROJIP_luzka_celkem);

            public int Standard_luzka_s_kyslikem_celkem { get; set; }
            public int Standard_luzka_s_kyslikem_covid { get; set; }
            public int Standard_luzka_s_kyslikem_necovid { get; set; }
            public decimal Standard_luzka_s_kyslikem_perc() => (Standard_luzka_s_kyslikem_celkem == 0 ? 0 : ((decimal)Standard_luzka_s_kyslikem_covid + (decimal)Standard_luzka_s_kyslikem_necovid) / (decimal)Standard_luzka_s_kyslikem_celkem);



            public int Lekari_AROJIP_celkem { get; set; }
            public int Sestry_AROJIP_celkem { get; set; }
            public int Ventilatory_prenosne_celkem { get; set; }
            public int Ventilatory_operacnisal_celkem { get; set; }
            public int Standard_luzka_celkem { get; set; }
            public int Standard_luzka_s_monitor_celkem { get; set; }
        }

        public static Data Diff(Data f, Data l)
        {
            Data d = new Data();
            d.lastUpdated = new DateTime((l.lastUpdated - f.lastUpdated).Ticks);
            List<Data.Hospital> hs = new List<Hospital>();
            foreach (var fh in f.hospitals)
            {
                Hospital h = new Hospital();
                Hospital lh = l.hospitals.FirstOrDefault(m => m.nemocniceID == fh.nemocniceID);
                if (lh != null)
                {

                    hs.Add(Diff(fh, lh));
                }

            }
            d.hospitals = hs.ToArray();
            return d;
        }

        public static Hospital Diff(Hospital fh, Hospital lh)
        {
            Hospital h = new Hospital();
            h.lastModified = new DateTime(Math.Abs((lh.lastModified - fh.lastModified).Ticks));

            h.AROJIP_luzka_celkem = lh.AROJIP_luzka_celkem - fh.AROJIP_luzka_celkem;
            h.AROJIP_luzka_covid = lh.AROJIP_luzka_covid - fh.AROJIP_luzka_covid;
            h.AROJIP_luzka_necovid = lh.AROJIP_luzka_necovid - fh.AROJIP_luzka_necovid;
            h.CRRT_celkem = lh.CRRT_celkem - fh.CRRT_celkem;
            h.CRRT_volna = lh.CRRT_volna - fh.CRRT_volna;
            h.ECMO_celkem = lh.ECMO_celkem - fh.ECMO_celkem;
            h.ECMO_volna = lh.ECMO_volna - fh.ECMO_volna;

            h.IHD_celkem = lh.IHD_celkem - fh.IHD_celkem;
            h.IHD_volna = lh.IHD_volna - fh.IHD_volna;
            h.Lekari_AROJIP_celkem = lh.Lekari_AROJIP_celkem - fh.Lekari_AROJIP_celkem;
            h.name = lh.name;
            h.nemocniceID = lh.nemocniceID;
            h.region = lh.region;
            h.Sestry_AROJIP_celkem = lh.Sestry_AROJIP_celkem - fh.Sestry_AROJIP_celkem;
            h.Standard_luzka_celkem = lh.Standard_luzka_celkem - fh.Standard_luzka_celkem;
            h.Standard_luzka_s_kyslikem_celkem = lh.Standard_luzka_s_kyslikem_celkem - fh.Standard_luzka_s_kyslikem_celkem;
            h.Standard_luzka_s_kyslikem_covid = lh.Standard_luzka_s_kyslikem_covid - fh.Standard_luzka_s_kyslikem_covid;
            h.Standard_luzka_s_kyslikem_necovid = lh.Standard_luzka_s_kyslikem_necovid - fh.Standard_luzka_s_kyslikem_necovid;
            h.Standard_luzka_s_monitor_celkem = lh.Standard_luzka_s_monitor_celkem - fh.Standard_luzka_s_monitor_celkem;
            h.UPV_celkem = lh.UPV_celkem - fh.UPV_celkem;
            h.UPV_volna = lh.UPV_volna - fh.UPV_volna;
            h.Ventilatory_operacnisal_celkem = lh.Ventilatory_operacnisal_celkem - fh.Ventilatory_operacnisal_celkem;
            h.Ventilatory_prenosne_celkem = lh.Ventilatory_prenosne_celkem - fh.Ventilatory_prenosne_celkem;
            return h;
        }

        public static Hospital Aggregate(IEnumerable<Hospital> hospitals)
        {
            Hospital h = new Hospital();

            h.AROJIP_luzka_celkem = hospitals.Sum(m => m.AROJIP_luzka_celkem);
            h.AROJIP_luzka_covid = hospitals.Sum(m => m.AROJIP_luzka_covid);
            h.AROJIP_luzka_necovid = hospitals.Sum(m => m.AROJIP_luzka_necovid);
            h.CRRT_celkem = hospitals.Sum(m => m.CRRT_celkem);
            h.CRRT_volna = hospitals.Sum(m => m.CRRT_volna);
            h.ECMO_celkem = hospitals.Sum(m => m.ECMO_celkem);
            h.ECMO_volna = hospitals.Sum(m => m.ECMO_volna);


            h.lastModified = hospitals.Max(m => m.lastModified);
            h.IHD_celkem = hospitals.Sum(m => m.IHD_celkem);
            h.IHD_volna = hospitals.Sum(m => m.IHD_volna);
            h.Lekari_AROJIP_celkem = hospitals.Sum(m => m.Lekari_AROJIP_celkem);
            h.name = "";
            h.nemocniceID = 0;
            h.region = hospitals.First().region;
            h.Sestry_AROJIP_celkem = hospitals.Sum(m => m.Sestry_AROJIP_celkem);
            h.Standard_luzka_celkem = hospitals.Sum(m => m.Standard_luzka_celkem);
            h.Standard_luzka_s_kyslikem_celkem = hospitals.Sum(m => m.Standard_luzka_s_kyslikem_celkem);
            h.Standard_luzka_s_kyslikem_covid = hospitals.Sum(m => m.Standard_luzka_s_kyslikem_covid);
            h.Standard_luzka_s_kyslikem_necovid = hospitals.Sum(m => m.Standard_luzka_s_kyslikem_necovid);
            h.Standard_luzka_s_monitor_celkem = hospitals.Sum(m => m.Standard_luzka_s_monitor_celkem);
            h.UPV_celkem = hospitals.Sum(m => m.UPV_celkem);
            h.UPV_volna = hospitals.Sum(m => m.UPV_volna);
            h.Ventilatory_operacnisal_celkem = hospitals.Sum(m => m.Ventilatory_operacnisal_celkem);
            h.Ventilatory_prenosne_celkem = hospitals.Sum(m => m.Ventilatory_prenosne_celkem);

            return h;
        }
        public static DateTime? ToDateTime(string value, params string[] formats)
        {
            if (string.IsNullOrEmpty(value))
                return null;
            foreach (var f in formats)
            {
                var dt = ToDateTime(value, f);
                if (dt.HasValue)
                    return dt;
            }
            return null;
        }

        public static DateTime? ToDateTime(string value, string format)
        {
            if (string.IsNullOrEmpty(value))
                return null;

            DateTime tmp;
            if (DateTime.TryParseExact(value, format, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeLocal | System.Globalization.DateTimeStyles.AllowWhiteSpaces, out tmp))
                return new DateTime?(tmp);
            else
                return null;
        }

    }
}
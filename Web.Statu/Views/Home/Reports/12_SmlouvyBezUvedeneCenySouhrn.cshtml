@using Nest
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using HlidacStatu.Web.Framework
@using HlidacStatu.Lib;
@using HlidacStatu.Lib.Render;


@{
    int size = 100;
    AggregationContainerDescriptor<HlidacStatu.Lib.Data.Smlouva> aggs = new AggregationContainerDescriptor<HlidacStatu.Lib.Data.Smlouva>()
        .Terms("perIco", m => m
            .Field("platce.ico")
            .Size(size)
            .Order(o => o.Descending("_count"))
            );




    var res = HlidacStatu.Lib.Data.Smlouva.Search.SimpleSearch("issues.issueTypeId:100", 1, 0,
        HlidacStatu.Lib.Data.Smlouva.Search.OrderResult.FastestForScroll, aggs, platnyZaznam: true);

    ReportDataSource rdsPerIco = new ReportDataSource(new ReportDataSource.Column[]
        {
new ReportDataSource.Column() { Name="IČO",
    HtmlRender = (s) => {
                            System.Tuple<string,string> data = (System.Tuple<string,string>)s;
                            return string.Format(@"<a href='/subjekt/{0}'>{1}</a>", data.Item2, data.Item1);
                        },
    TextRender = (s) => { return ((System.Tuple<string,string>)s).Item1.ToString(); }
},
new ReportDataSource.Column() {
    Name ="Počet smluv bez uvedené ceny",
    OrderValueRender = (s) => { return HlidacStatu.Util.RenderData.OrderValueFormat(Convert.ToInt64(s)); }
},
new ReportDataSource.Column() {
    Name ="Počet všech smluv",
    OrderValueRender = (s) => { return HlidacStatu.Util.RenderData.OrderValueFormat(Convert.ToInt64(s)); }
},
new ReportDataSource.Column() {
    Name ="% smluv bez cen",
    HtmlRender = (s) => { return ((double)s).ToString("P1"); },
    TextRender = (s) => { return ((double)s).ToString("P1"); },
    OrderValueRender = (s) => { return HlidacStatu.Util.RenderData.OrderValueFormat((double)s); }
},
        }
        );

    foreach (Nest.KeyedBucket<object> val in ((BucketAggregate)res.ElasticResults.Aggregations["perIco"]).Items)
    {
        var ico = (string)val.Key;
        var f = HlidacStatu.Lib.Data.Firmy.Get(ico);
        rdsPerIco.AddRow(
            new Tuple<string, string>(f.Jmeno, (string)val.Key),
            val.DocCount.ToString(),
            f.StatistikaRegistruSmluv().Summary().PocetSmluv,
            (double)val.DocCount / (double)f.StatistikaRegistruSmluv().Summary().PocetSmluv
            );
    }


    var model = new HlidacStatu.Lib.Render.ReportModel();
    model.Add("perIcoChart_d", "Plátci utajující hodnotu smluv",
        UtilChart.SimpleBarChart(
            false, false,
            400,
            "perIco_d",
            "Úřady", "Počet smluv",
            rdsPerIco.Filter(10))
        );
    model.Add("perIcoTable", "",rdsPerIco);

}

<p class="text-muted">Odběratelé skrývající nebo neuvádějící hodnotu smlouvy</p>
<p><a href="/Report/13">Úplný seznam smluv bez uvedené hodnoty smlouvy</a></p>
<div class="row">
    <div class="col-xs-12">
        @foreach (var q in model.GetQueue("perIcoChart_d"))
        {
            @UtilChart.RenderReport(q, @"{
                 'language': {
                    'url': '//cdn.datatables.net/plug-ins/1.10.19/i18n/Czech.json'
                },
                'order': [[3,'desc']],
                'lengthChange': false,
                'info': false,
                }", q.Key)
        }


    </div>
    <div class="col-xs-12">
        @foreach (var q in model.GetQueue("perIcoTable"))
        {
            @UtilChart.RenderReport(q, @"{
                 'language': {
                    'url': '//cdn.datatables.net/plug-ins/1.10.19/i18n/Czech.json'
                },
                'order': [[3,'desc']],
                'lengthChange': false,
                'info': false,
                }", q.Key)
        }
    </div>
</div>






@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using HlidacStatu.Web.Framework
@using HlidacStatu.Lib

@using Devmasters.Core
@using System.Data
@using System.Data.SqlClient
@using HlidacStatu.Lib.Data
@using HlidacStatu.Lib.Render

@{
                /**/

                Dictionary<string, HlidacStatu.Lib.Analysis.BasicDataPerYear> firmyL =
                    new Dictionary<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>();

                Dictionary<string, HlidacStatu.Lib.Analysis.BasicDataPerYear> osobyL =
                       new Dictionary<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>();

                Relation.AktualnostType aktualnost = Relation.AktualnostType.Aktualni;
                firmyL = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>(
                    System.IO.File.ReadAllText(StaticData.App_Data_Path + $@"topPoliticiStats.2018.{aktualnost.ToString()}.json")
                    );


                var topF = firmyL
                    .OrderByDescending(o => o.Value.Data[2018].CelkemCena)
                    //.ThenByDescending(o => o.Value.Summary.Pocet)
                    .ToArray();

                var scale = HlidacStatu.Util.RenderData.GetBestScale(
                    topF
                        .Select(m => m.Value.Data[2017].CelkemCena)
                        .Union(topF.Select(m => m.Value.Data[2018].CelkemCena))
                    ); //calculate it
                scale = HlidacStatu.Util.RenderData.MaxScale.Miliarda; //manual settings

                var tableSloupce = new ReportDataSource<KeyValuePair<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>.Column[]
                    {
new  ReportDataSource<KeyValuePair<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>.Column() {
Name ="Osoba",
HtmlRender = (s) => {
var o = Osoby.GetById.Get(Convert.ToInt32(s.Key));
return string.Format("<a href='{0}'>{1}</a>", o.GetUrl(false), o.FullNameWithYear());
},
OrderValueRender = (s) => {
var o = Osoby.GetById.Get(Convert.ToInt32(s.Key));
return o.FullName();
},
ValueRender = (s) => {
var o = Osoby.GetById.Get(Convert.ToInt32(s.Key));
return o.FullName();
},
TextRender = (s) => {
var o = Osoby.GetById.Get(Convert.ToInt32(s.Key));
return o.FullName();
}

},

new  ReportDataSource<KeyValuePair<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>.Column() {
Name =$"Smlouvy 2018 v {scale.ToNiceDisplayName()} Kč",
HtmlRender = (s) => {
return HlidacStatu.Util.RenderData.ShortNicePrice(s.Value[2018].CelkemCena,mena:"" , html: true, showDecimal:HlidacStatu.Util.RenderData.ShowDecimalVal.Show, exactScale:scale, hideSuffix:true);
},
OrderValueRender = (s) => {
return HlidacStatu.Util.RenderData.OrderValueFormat(s.Value[2018].CelkemCena);
},
ValueRender = (s) => {
return s.Value[2018].CelkemCena;
},
CssClass ="text-right number"
},

new  ReportDataSource<KeyValuePair<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>.Column() {
Name =$"Smlouvy 2017 v {scale.ToNiceDisplayName()} Kč",
HtmlRender = (s) => {
return HlidacStatu.Util.RenderData.ShortNicePrice(s.Value[2017].CelkemCena,mena:"" , html: true, showDecimal:HlidacStatu.Util.RenderData.ShowDecimalVal.Show,exactScale:scale, hideSuffix:true);
},
ValueRender = (s) => {
return s.Value[2017].CelkemCena;
},
OrderValueRender = (s) => {
return HlidacStatu.Util.RenderData.OrderValueFormat(s.Value[2017].CelkemCena);
},
CssClass ="text-right number"
},

new  ReportDataSource<KeyValuePair<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>.Column() {
Name ="Změna 2017-18",
HtmlRender = (s) => {
return s.Value.YearChange(2018).CenaChangePercentToSymbolString(true);
},
OrderValueRender = (s) => {
return HlidacStatu.Util.RenderData.OrderValueFormat(s.Value.YearChange(2018).CenaChangePerc);
},
CssClass ="text-right number"
},


new  ReportDataSource<KeyValuePair<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>.Column() {
Name =$"Smlouvy 2016-18 v {scale.ToNiceDisplayName()} Kč",
HtmlRender = (s) => {
return HlidacStatu.Util.RenderData.ShortNicePrice(s.Value.Summary.CelkemCena,mena:"", html: true, showDecimal:HlidacStatu.Util.RenderData.ShowDecimalVal.Show, exactScale:scale, hideSuffix:true);
},
OrderValueRender = (s) => {
return HlidacStatu.Util.RenderData.OrderValueFormat(s.Value.Summary.CelkemCena);
},
CssClass ="text-right number"
},

                    };

                var rds1 = new ReportDataSource<KeyValuePair<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>(tableSloupce);
                foreach (var i in topF)
                {
                    rds1.AddRow(i);
                }


}
<h3>Osoby s největšími obchodními vztahy se státem dle registru smluv v roce 2018</h3>
<p class="text-muted">
    <b>Data jsou platná k 1.1.2018. </b>
    <br/>
    Dle zákona o registru smluv mohou být smlouvy za rok 2018 přidána do registru do 31.1.2018.
    K tomuto datu provedeme opakovaný přepočet dat.
</p>
<div style="margin-top:30px;"></div>

@UtilChart.RenderReport("Suma ročních kontraktů podle firem a holdingů", ReportModel.QueueItem.types.chart,
        UtilChart.SimpleBarChart(
            false, false, 400, "chartinfo", "Firmy", "Kč",
                new[] {
                    rds1.Filter(new int[] { 0, 1 }, 20,"2018" ),
                    rds1.Filter(new int[] { 0, 2 }, 20,"2017" ),
            },
            tooltipFormatFull: "<center><small>{point.category}</small><br /><b>{point.y:,.0f}</b></center>",
            loadEvents: @"function(event) {
                    this.series.forEach(function(d,i){if(d.index==1)d.hide()})
                }"
            ),""
        )


@Html.Raw(
    UtilChart.RenderReportTableT<KeyValuePair<string, HlidacStatu.Lib.Analysis.BasicDataPerYear>>(
        "", rds1, @"{
                 'language': {
                    'url': '//cdn.datatables.net/plug-ins/1.10.19/i18n/Czech.json'
                },
                'pageLength': 25,
                'order': [],
                'lengthChange': false,
                'info': false,
                }", "t1")
        )






@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using HlidacStatu.Web.Framework
@using HlidacStatu.Lib
@using Nest;
@using Devmasters
@using System.Data
@using System.Data.SqlClient
@using HlidacStatu.Lib.Data
@using HlidacStatu.Lib.Render
@using HlidacStatu.Web.Framework.Report;

@{ 

    string url = "https://onemocneni-aktualne.mzcr.cz/api/v2/covid-19/nakazeni-vyleceni-umrti-testy.csv";
    List<(DateTime, int)> umrti = new List<(DateTime, int)>();

    using (System.IO.StreamReader r = new StreamReader(new System.Net.WebClient().OpenRead(url)))
    {
        var csv = new CsvHelper.CsvReader(r, new CsvHelper.Configuration.CsvConfiguration(HlidacStatu.Util.Consts.csCulture) { HasHeaderRecord = true, Delimiter = "," });
        csv.Read(); csv.ReadHeader();
        csv.Read();//skip second line
        while (csv.Read())
        {
            DateTime? dt = Devmasters.DT.Util.ToDateTime(csv.GetField<string>("datum"), "yyyy-MM-dd");
            int umr = csv.GetField<int>("kumulativni_pocet_umrti");
            if (dt.HasValue && umr>0)
            {
                umrti.Add((dt.Value, umr));
            }
        }

    }

    DateTime sept1 = new DateTime(2020, 9, 1);
    int untilSep1 = 427;

    DateTime lastDate = umrti.Last().Item1;
    int lastUmr = umrti.Last().Item2;
    List<HlidacStatu.Lib.Render.ReportDataTimeValue> data = new List<ReportDataTimeValue>(
        umrti.Select(m => new ReportDataTimeValue() { Date = m.Item1, Value = m.Item2 })
        ); }

<div style="width:700px;text-align:center">
<h2>Počet úmrtí v souvislosti s COVID-19</h2>
<p class="text-info" style="font-size:17px">Andrej Babiš 24. dubna 2019:"Zachránili jsme tisíce mrtvých".</p>
<p class="text-warning" style="font-size:19px">Za <b>163 dní</b> od 22.3. do 31.8.2020 zemřelo <b>@untilSep1 osob</b>.
<br/><span class="text-danger">Za <b>@((int)(lastDate-sept1).TotalDays) dní</b> od 1.9. zemřelo <b>@HlidacStatu.Util.RenderData.NiceNumber(lastUmr - untilSep1) osob</b>.</span>
    </p>
<div style="width:600px">
    @SimpleColumnChart(new (string name, 
    IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)[] { (name: "Úmrtí ", values: data.Where(m => m.Date < sept1.AddYears(1))) }, 
    "COVID-19 úmrtí", "Úmrtí", 500, chartType:"area")
</div>

</div>


@helper SimpleColumnChart(IEnumerable<(string name, IEnumerable<HlidacStatu.Lib.Render.ReportDataTimeValue> values)> data,
    string title, string valueName,
    int height, string addStyle ="", string chartType = "column")
{
string containerId = "chart_" + Guid.NewGuid().ToString("N");
List<string> sdata = new List<string>();
foreach (var d in data)
{
    var vmax = d.values.Max(max => max.Value);
    sdata.Add(
        $"{{ name : '{d.name}', data :["
        + d.values
            .Select((m,i) =>
            {
                if (m.Value != vmax && m.Value != 427)
                {
                    return $"[{i},{m.Value.ToString(HlidacStatu.Util.Consts.enCulture)}]";
                }
                else
                {
                    return $"{{x:{i},y:{m.Value:N0}, selected:true, marker:{{enabled:true}}, dataLabels: {{enabled: true}} }}";
                };
            }
            )
            .Aggregate((f, s) => f + "," + s)
        + " ]}"
    );
    //sdata.Add();
}

    <div id="@containerId" style="height:@(height)px;@addStyle"></div>
    <script>
Highcharts.chart('@containerId', 
    {
    chart:
    {
        plotBackgroundColor: null,
        plotBorderWidth: 0,
        plotShadow: false,
        type: '@chartType',
        zoomType: 'x'
    },
    title:
    {
        text: '@title'
    },

    yAxis:
    {
        title:
        {
            text: 'Počet'
        }
    },
    tooltip:
    {
        xDateFormat: '%d. %m. %Y %H:%M',
        shared: true
    },

  annotations: [{
      useHTML: true,
      labelOptions: {
        backgroundColor: 'rgba(255,255,255,0.8)',
        borderColor: "#000",
        style: {fontSize: '13px'},
        x: -140,
        y: 100,
        allowOverlap: true
      },
      labels: [{
        point: {
          xAxis: 0,
          yAxis: 0,
          x: 156,
          y: 421
        },
        text: '<b>Babiš 24.srpna<b><br/>„Jsem trochu v šoku z toho,<br/>co vypadlo z ministerstva zdravotnictví.<br/>Vůbec se mi to nelíbí“.'
      }],
    }
    ,
    {
      useHTML: true,
      labelOptions: {
        backgroundColor: 'rgba(255,255,255,0.5)',
        borderColor: "#FFAAAA",
        style: {fontSize: '13px'},
        x: 200,
        y: 0,
        allowOverlap: true
    },
      labels: [{
        point: {
          xAxis: 0,
          yAxis: 0,
          x: 171,
          y: 457
        },
        text: '<b>Babiš 8.září<b><br/>„Čtu, co teď vydala WHO.<br/>Ta WHO, která ani nevěděla, že je pandemie.<br/>Podle mě by měla mlčet.<br/>A posílám statistiku počtu úmrtí.<br/>Jsme na tom velmi dobře.“.'
      }],
    },
    {
      useHTML: true,
      labelOptions: {
        backgroundColor: 'rgba(255,255,255,0.5)',
        borderColor: "#000000",
        style: {fontSize: '13px'},
        x: -180,
        y: -180,
        allowOverlap: true
    },
      labels: [{
        point: {
          xAxis: 0,
          yAxis: 0,
          x: 181,
          y: 512
        },
        text: '<b>Babiš 18.září<b><br/>„Neřešte stále covid-19,<br/>Dneska i mladí lidé mají zájem o zahrady.<br/>Schvalme zahrádkářský zákon“.'
      }],
    }
    
  ],



    xAxis:
    {
        gridLineWidth: 1,

    },

    legend:
    {
        enabled: false
    },
    series: [
        @Html.Raw(string.Join(",", sdata))
    ]
}
    
    );</script>

}



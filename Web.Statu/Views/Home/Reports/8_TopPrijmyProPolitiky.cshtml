@using Nest
@using Devmasters.Core;
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Web
@using System.Web.Mvc
@using HlidacStatu.Web.Framework
@using HlidacStatu.Lib;
@using HlidacStatu.Lib.Analysis;
@using HlidacStatu.Lib.Render;

@{

    Response.Redirect("/Politici");
    Response.End();

    if (this.User?.IsInRole("canEditData") == false)
    {
        Response.Redirect("/Politici");
        Response.End();
    }

    HlidacStatu.Lib.Data.Relation.AktualnostType aktualnost;
    if (!Enum.TryParse<HlidacStatu.Lib.Data.Relation.AktualnostType>(Request.QueryString["aktualnost"], true, out aktualnost))
    {
        aktualnost = HlidacStatu.Lib.Data.Relation.AktualnostType.Nedavny;
    }


    string[] velkePolostatniFirmy = new string[] { };


    HlidacStatu.Lib.Data.AnalysisCalculation.VazbyFiremNaPolitiky vazbyNaPolitiky = null;
    switch (aktualnost)
    {
        case HlidacStatu.Lib.Data.Relation.AktualnostType.Aktualni:
            vazbyNaPolitiky = HlidacStatu.Lib.StaticData.FirmySVazbamiNaPolitiky_aktualni_Cache.Get();
            break;
        case HlidacStatu.Lib.Data.Relation.AktualnostType.Nedavny:
            vazbyNaPolitiky = HlidacStatu.Lib.StaticData.FirmySVazbamiNaPolitiky_nedavne_Cache.Get();
            break;
        case HlidacStatu.Lib.Data.Relation.AktualnostType.Neaktualni:
            vazbyNaPolitiky = HlidacStatu.Lib.StaticData.FirmySVazbamiNaPolitiky_vsechny_Cache.Get();
            break;
        case HlidacStatu.Lib.Data.Relation.AktualnostType.Libovolny:
            vazbyNaPolitiky = HlidacStatu.Lib.StaticData.FirmySVazbamiNaPolitiky_vsechny_Cache.Get();
            break;
    }



    Dictionary<int, BasicData> politiciAll = new Dictionary<int, BasicData>();
    foreach (var kvFirma in vazbyNaPolitiky.SoukromeFirmy)
    {
        if (!velkePolostatniFirmy.Contains(kvFirma.Key)) //vynech polostatni firmy
        {
            var statForFirma = ACore.GetBasicStatisticForICO(kvFirma.Key);
            var politiciVeFirme = kvFirma.Value;
            foreach (var p in politiciVeFirme.Distinct())
            {
                if (politiciAll.ContainsKey(p))
                {
                    politiciAll[p].CelkemCena += statForFirma.Summary.CelkemCena;
                    politiciAll[p].Pocet += statForFirma.Summary.Pocet;
                }
                else
                {
                    politiciAll.Add(p, new BasicData() { CelkemCena = statForFirma.Summary.CelkemCena, Pocet = statForFirma.Summary.Pocet });
                }

            }
        }
    }

    var politici = politiciAll
        .OrderByDescending(m => m.Value.CelkemCena)
        .Take(100)
        .Select(kv => new
        {
            politik = HlidacStatu.Lib.StaticData.Politici
                                    .Get()
                                    .Where(m => m.InternalId == kv.Key)
                                    .FirstOrDefault(),
            stat = kv.Value
        });


}


@{

    ViewBag.MoreHtml = "<p><b>Tady najdete <a href='/Politici'>Seznam politiků a jejich vazby na soukromé firmy</a></b></p>";
}




<h3>Na které politiky s vazbami na soukromé firmy je navázán největší příjem ze smluv?</h3>
<p>
    Mnoho aktivních i bývalých politiků má vztahy či vlastní soukromé firmy obchodující se státem.
    Nedokážeme posoudit, zda svůj aktuální či bývalý politický vliv a kontakty využívají ve prospěch firem, ve kterých se angažují (či se angažovali).
</p>
<p>
    Domníváme se však, že je dobré o těchto vztazích vědět a
    necháváme na čtenářově posouzení, zda politická působnosti osoby měla vliv na získání zakázek pro tyto firmy.
</p>
<p>
    <b>Upozornění</b>: Tento report netvrdí, že se jedná o příjmy danného politika. Tento report neposuzuje legálnost daných smluv.
    Tento report pouze konstatuje fakt, že daná osoba je či byla v politické pozici (či vysoké pozici ve státní/místní správě),
    angažuje se či se angažovala v uvedených firmách, a tyto firmy získaly kontrakty v uvedených částkách.
</p>
<p style="padding-top:20px;padding-bottom:20px;">
    <a href="@Url.Action("Report", new { id = 8, aktualnost = HlidacStatu.Lib.Data.Relation.AktualnostType.Aktualni })"
       class="btn btn-@(aktualnost == HlidacStatu.Lib.Data.Relation.AktualnostType.Aktualni ? "success" : "primary") btn-sm" role="button">
        Pouze aktuální angažovanosti
    </a>
    <a href="@Url.Action("Report", new { id = 8,aktualnost = HlidacStatu.Lib.Data.Relation.AktualnostType.Nedavny })"
       class="btn btn-@(aktualnost == HlidacStatu.Lib.Data.Relation.AktualnostType.Nedavny ? "success" : "primary") btn-sm" role="button">
        Aktuální a nedávno skončené angažovanosti
    </a>
    <a href="@Url.Action("Report", new { id = 8,aktualnost = HlidacStatu.Lib.Data.Relation.AktualnostType.Libovolny })"
       class="btn btn-@(aktualnost == HlidacStatu.Lib.Data.Relation.AktualnostType.Libovolny ? "success" : "primary") btn-sm" role="button">
        Všechny angažovanosti včetně historických
    </a>
</p>


<table class="table table-hover table-bordered">
    <tr>
        <th>
            Osoba
        </th>
        <th>
            Celkový příjem firem ze smluv ke kterým má osoba vazbu
        </th>
        <th>
            Firmy s vazbou na osobu a jejich objemy zakázek (prvních 10)
        </th>
    </tr>
    @foreach (var i in politici)
    {
        <tr>
            <td>
                <a href="@Url.Action("politik", new { id = i.politik.NameId })">@Html.Raw(i.politik.FullName(true))</a>
                <br />
                @if (!string.IsNullOrEmpty(i.politik.Description(false, m => true, 5)))
                {
                    <span>
                        @i.politik.Description(false, m => true, 5)<br />
                    </span>
                }
                (<a href="@Url.Action("politikVazby", new { id = i.politik.NameId })">všechny vazby osoby</a>)
            </td>
            <td>
                Celková částka:@Html.Raw(HlidacStatu.Lib.Data.Smlouva.NicePrice(i.stat.CelkemCena, html: true, shortFormat: true)) z celkem  @HlidacStatu.Util.PluralForm.Get((int)i.stat.Pocet, "{0} smlouva;{0} smlouvy;{0} smluv")
            </td>
            <td>
                @{
                    int pocetFirem = 10;
                    var pfirmy = i.politik.AktualniVazby(aktualnost)
                                .Where(v => !string.IsNullOrEmpty(v.To.Id))
                                .GroupBy(f => f.To.Id, v => v, (ico, v) => new
                                {
                                    ICO = ico,
                                    FirmaName = v.First().To?.PrintName(),//HlidacStatu.Lib.Data.External.FirmyDB.NameFromIco(ico, true),
                                        VazbyPerIco = i.politik.VazbyProICO(ico),
                                    stat = HlidacStatu.Lib.Analysis.ACore.GetBasicStatisticForICO(ico)
                                })
                                .Where(m => m.stat.Summary.CelkemCena > 0)
                                .OrderByDescending(m => m.stat.Summary.CelkemCena).ThenBy(m => m.ICO);
                    int numToDisplay = pfirmy.Count() > pocetFirem + 2 ? pocetFirem : pfirmy.Count();
                }
                <div>
                    @foreach (var vPerIco in pfirmy.Take(numToDisplay))
                    {
                        <span>
                            @vPerIco.FirmaName,  <a href="/subjekt/@vPerIco.ICO">@HlidacStatu.Util.PluralForm.Get((int)vPerIco.stat.Summary.Pocet, "{0} smlouva;{0} smlouvy;{0} smluv")</a>
                            na @Html.Raw(HlidacStatu.Lib.Data.Smlouva.NicePrice(vPerIco.stat.Summary.CelkemCena, html: true, shortFormat: true)).<br />
                        </span>
                    }
                    @if (pfirmy.Count() > numToDisplay)
                    {<span>
                            ... a @HlidacStatu.Util.PluralForm.Get(pfirmy.Count() - numToDisplay, "další firma;další {0} firmy;dalších {0} firem").
                        </span>
                    }
                </div>
            </td>
        </tr>
    }
</table>


@Html.Partial("~/Views/Home/_PolitikDisclaimer.cshtml", this.ViewData)


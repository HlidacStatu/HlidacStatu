@model HlidacStatu.Lib.Data.OrgStrukturyStatu.D3GraphHierarchy
@using HlidacStatu.Lib.Data.OrgStrukturyStatu;
@using Newtonsoft.Json;

@{
    var json = JsonConvert.SerializeObject(Model);
}

@section scripts
{
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>



}


<style>
    .node {
        cursor: pointer;
    }

        .node circle {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        .node text {
            font: 10px sans-serif;
            text-shadow: 0px 0px 2px #FFFFFF, 1px 1px 2px #FFFFFF, -1px -1px 2px #FFFFFF;
            font-weight: bold;
        }

    .hidden {
        display: none;
    }

    .link {
        fill: none;
    }
</style>
<div id="snusnu"></div>



<script type="text/javascript">

    function circleRadius(d) {
        return Math.max((d.size / flare.size) * maxCircleRadius, 8);
    }

        var flare = @Html.Raw(json);


    var maxStrokeWidth = 70;
    var maxCircleRadius = 50;

    var margin = {top: 20, right: 120, bottom: 20, left: 300};

    let nodes = d3.layout.tree().nodes(flare);
    let maxDepth = nodes.reduce((a,b)=>a.depth>b.depth? a:b).depth;
    let maxBreadth = nodes.filter((n) => n.depth === maxDepth).length;

    var width = (maxDepth + 1 ) * 400;
    var height = maxBreadth * 40;

        // width = 1600 - margin.right - margin.left,
        // height = 7000 - margin.top - margin.bottom;

    var i = 0,
        duration = 750,
        root;

    var tree = d3.layout.tree()
        .size([height, width]);

    var diagonal = d3.svg.diagonal()
        .projection(function(d) { return [d.y, d.x]; });

    var svg = d3.select("div#snusnu").append("svg")
        .attr("width", width + margin.right + margin.left)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      root = flare;
      root.x0 = height / 2;
      root.y0 = 0;

      function collapse(d) {
        if (d.children) {
          d._children = d.children;
          d._children.forEach(collapse);
          d.children = null;
        }
      }

      //root.children.forEach(collapse);  //we dont want everything collapsed by default
      update(root);

    d3.select(self.frameElement).style("height", "800px");

    function update(source) {

      // Compute the new tree layout.
      var nodes = tree.nodes(root).reverse(),
          links = tree.links(nodes);

      // Normalize for fixed-depth.
      nodes.forEach(function(d) { d.y = d.depth * 300; });  //how far children nodes are (left right)

      // Update the nodes…
      var node = svg.selectAll("g.node")
          .data(nodes, function(d) { return d.id || (d.id = ++i); });

      // Enter any new nodes at the parent's previous position.
      var nodeEnter = node.enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
          .on("click", click);

      nodeEnter.append("circle")
          .attr("r", 1e-6)
          .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

      nodeEnter.append("text")
          .attr("x", function(d) { return (d.children || d._children ? -1 : 1) * (circleRadius(d) + 5) ; })
          .attr("dy", "-0.2em")
          .attr("class", "firstLine")
          .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
          .text(function(d) { return d.name; })
          .style("fill-opacity", 1e-6);

      nodeEnter.append("text")
          .attr("x", function(d) { return (d.children || d._children ? -1 : 1) * (circleRadius(d) + 5) ; })
          .attr("dy", "1em")
          .attr("class", "secondLine")
          .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
          .text(function(d) { return d.employs });

      nodeEnter.append("text")
          .attr("x", function(d) { return (d.children || d._children ? -1 : 1) * (circleRadius(d) + 5) ; })
          .attr("dy", "2.2em")
          .attr("class", function(d) { return d.children || d._children ? "thirdLine" : "thirdLine hidden";  })
          .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
          .text(function(d) { return d.manages });

      // Transition nodes to their new position.
      var nodeUpdate = node.transition()
          .duration(duration)
          .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

      nodeUpdate.select("circle")
          .attr("r", function(d) {return circleRadius(d) })   // Set function to draw circle size
          .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

      nodeUpdate.select("text")
          .style("fill-opacity", 1);

      // Transition exiting nodes to the parent's new position.
      var nodeExit = node.exit().transition()
          .duration(duration)
          .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
          .remove();

      nodeExit.select("circle")
          .attr("r", 1e-6);

      nodeExit.select("text")
          .style("fill-opacity", 1e-6);

      // Update the links…
      var link = svg.selectAll("path.link")
          .data(links, function(d) { return d.target.id; });

      // Enter any new links at the parent's previous position.
      link.enter().insert("path", "g")
          .attr("stroke-width", d => Math.max((d.target.size / flare.size) * maxStrokeWidth, 3))
          //.attr("stroke", d => { return "#" + (220 - Math.max(Math.ceil((d.target.size / flare.size) * 220), 1)).toString(16).repeat(3)})
          .attr("stroke", d => { let koef = Math.abs(Math.log10(d.target.size/ flare.size)) + 1; return "#" + Math.ceil( 220 - ((d.target.size/ flare.size)*220*koef)).toString(16).repeat(3)})
          .attr("stroke-opacity", 5)
          .attr("class", "link")
          .attr("d", function(d) {
            var o = {x: source.x0, y: source.y0};
            return diagonal({source: o, target: o});
          });

      // Update paths
      var path = svg.selectAll("path")
          //.attr('stroke-width', function(d) { return 50; })
          //.attr('stroke', function(d) { return 'red'; })

      // Transition links to their new position.
      link.transition()
          .duration(duration)
          .attr("d", diagonal);

      // Transition exiting nodes to the parent's new position.
      link.exit().transition()
          .duration(duration)
          .attr("d", function(d) {
            var o = {x: source.x, y: source.y};
            return diagonal({source: o, target: o});
          })
          .remove();

      // Stash the old positions for transition.
      nodes.forEach(function(d) {
        d.x0 = d.x;
        d.y0 = d.y;
      });
    }

    // Toggle children on click.
    function click(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }


        /*
        root.children.forEach(function(node) {
            console.log(node, d, node === d);
            //collapse(node);
        });*/
      update(d);
    }
</script>

